<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SANJIN BLOG</title>
  
  <subtitle>just do &#39;it&#39;</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-12T06:31:49.070Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>liu-san-jin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用户登录凭证</title>
    <link href="http://example.com/2022/04/10/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%87%AD%E8%AF%81/"/>
    <id>http://example.com/2022/04/10/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%87%AD%E8%AF%81/</id>
    <published>2022-04-10T01:51:50.000Z</published>
    <updated>2022-04-12T06:31:49.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要登录凭证？"><a href="#为什么需要登录凭证？" class="headerlink" title="为什么需要登录凭证？"></a>为什么需要登录凭证？</h2><p>在web开发中，我们使用最多的协议是http，但是http协议是一个无状态的协议</p><ul><li>无状态协议：http每次请求都是一个单独的请求，和之前的请求没有关系。</li></ul><h2 id="登录凭证"><a href="#登录凭证" class="headerlink" title="登录凭证"></a>登录凭证</h2><h3 id="cookie-session（被淘汰）"><a href="#cookie-session（被淘汰）" class="headerlink" title="cookie+session（被淘汰）"></a>cookie+session（被淘汰）</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>cookie 又称为小甜饼，类型为小型文本文件，某些网站为了辨别用户身份而存储在用户本地终端上的数据。</p><ul><li>浏览器会在特定的情况下携带cookie来发送请求，我们可以通过cookie来获取一些用户信息；</li><li>cookie可以分为内存cookie和硬盘cookie</li><li>内存cookie由浏览器维护，保存在内存中，浏览器关闭时Cookie就会消失，其存在时间是短暂的</li><li>硬盘Cookie保存在硬盘中，有一个过期时间，用户手动清理或者过期时间到，才会被清理。<h5 id="Cookie的常见属性"><a href="#Cookie的常见属性" class="headerlink" title="Cookie的常见属性"></a>Cookie的常见属性</h5></li></ul><p>Cookie的生命周期</p><ul><li>expires：设置的是Date.toUTCString(),设置格式是：expires = date-in-GMTString-format</li><li>max-age: 设置过期的秒钟：max-age = 60 * 60 * 24 * 365 (一年)</li></ul><p>Cookie的作用域：</p><ul><li>Domain：指定哪些主机可以接受cookie，如果不指定，默认为origin，不包括子域名（以<a href="http://www.baidu.com为例,tieba.baidu.com为子域名);如果指定为domain,则包含子域名./">www.baidu.com为例，tieba.baidu.com为子域名）；如果指定为domain，则包含子域名。</a></li><li>Path：指定主机下面哪些路径可以接受cookie </li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</p><h4 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h4><ul><li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li><li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下，我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li><li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li><li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li><li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</li></ul><h4 id="cookie-session的方式的缺点"><a href="#cookie-session的方式的缺点" class="headerlink" title="cookie+session的方式的缺点"></a>cookie+session的方式的缺点</h4><ul><li>Cookie会被附加在每个HTTP请求中，所以无形中增加了流量（事实上某些请求是不需要的）；</li><li>Cookie是明文传递的，所以存在安全性的问题；</li><li>Cookie的大小限制是4KB，对于复杂的需求来说是不够的；</li><li>对于浏览器外的其他客户端（比如iOS、Android），必须手动的设置cookie和session；</li><li>对于分布式系统和服务器集群中如何可以保证其他系统也可以正确的解析session？</li></ul><h3 id="Token令牌"><a href="#Token令牌" class="headerlink" title="Token令牌"></a>Token令牌</h3><h4 id="JWT实现Token机制三部分组成"><a href="#JWT实现Token机制三部分组成" class="headerlink" title="JWT实现Token机制三部分组成"></a>JWT实现Token机制三部分组成</h4><h5 id="header"><a href="#header" class="headerlink" title="header"></a>header</h5><ul><li><p>alg：加密采用的算法，默认是HMAC SHA256，采用同一个密钥进行加密和解密；</p></li><li><p>typ：JWT，固定值；</p></li><li><p>会通过base54Url算法进行编码；</p></li><li><h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5></li><li><p>携带的数据，比如我们可以将用户的id和name放到payload中；</p></li><li><p>默认也会携带iat（issued at），令牌的签发时间；</p></li><li><p>我们也可以设置过期时间：exp（expiration time）；</p></li><li><p>会通过base64Url算法进行编码</p></li></ul><h5 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h5><ul><li>设置一个secretKey，通过将前两个的结果合并后进行HMACSHA256的算法；</li><li>HMACSHA256(base64Url(header)+.+base64Url(payload), secretKey);</li><li>但是如果secretKey暴露是一件非常危险的事情，因为之后就可以模拟颁发token，<br>也可以解密token；</li></ul><h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><p>前面我们说过，HS256加密算法一单密钥暴露就是非常危险的事情：</p><ul><li>比如在分布式系统中，每一个子系统都需要获取到密钥；</li><li>那么拿到这个密钥后这个子系统既可以发布另外，也可以验证令牌；</li><li>但是对于一些资源服务器来说，它们只需要有验证令牌的能力就可以了；<br>这个时候我们可以使用非对称加密，RS256：</li><li>私钥（private key）：用于发布令牌；</li><li>公钥（public key）：用于验证令牌；<br>我们可以使用openssl来生成一对私钥和公钥：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl</span><br><span class="line">&gt; genrsa -out private.key <span class="number">1024</span> <span class="comment">//生成私钥</span></span><br><span class="line">&gt; rsa -<span class="keyword">in</span> private.key -pubout -out public.key <span class="comment">//生产共钥</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么需要登录凭证？&quot;&gt;&lt;a href=&quot;#为什么需要登录凭证？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要登录凭证？&quot;&gt;&lt;/a&gt;为什么需要登录凭证？&lt;/h2&gt;&lt;p&gt;在web开发中，我们使用最多的协议是http，但是http协议是一个无状态的</summary>
      
    
    
    
    
    <category term="cookie session JWT" scheme="http://example.com/tags/cookie-session-JWT/"/>
    
  </entry>
  
  <entry>
    <title>el-element 爬坑</title>
    <link href="http://example.com/2022/02/17/%E7%88%AC%E5%9D%91/"/>
    <id>http://example.com/2022/02/17/%E7%88%AC%E5%9D%91/</id>
    <published>2022-02-17T02:01:33.000Z</published>
    <updated>2022-02-17T09:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用table组件时-data-is-not-function"><a href="#使用table组件时-data-is-not-function" class="headerlink" title="使用table组件时 data is not function"></a>使用table组件时 data is not function</h2><p><code>:data=&quot;tableData&quot;</code> tableData需要是数组包含对象的形式，否则就会报data is not function</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用table组件时-data-is-not-function&quot;&gt;&lt;a href=&quot;#使用table组件时-data-is-not-function&quot; class=&quot;headerlink&quot; title=&quot;使用table组件时 data is not functio</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>语法糖中父组件中如何调用子组件的方法</title>
    <link href="http://example.com/2022/02/15/%E8%AF%AD%E6%B3%95%E7%B3%96%E4%B8%AD%E7%88%B6%E7%BB%84%E4%BB%B6%E4%B8%AD%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/02/15/%E8%AF%AD%E6%B3%95%E7%B3%96%E4%B8%AD%E7%88%B6%E7%BB%84%E4%BB%B6%E4%B8%AD%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-02-15T03:21:45.000Z</published>
    <updated>2022-02-15T03:25:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父组件中"><a href="#父组件中" class="headerlink" title="父组件中"></a>父组件中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child ref=&quot;childRef&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">// 引入子组件</span><br><span class="line">import child from &quot;./child.vue&quot;;</span><br><span class="line">// 获取子组件</span><br><span class="line">const childRef = ref(null);</span><br><span class="line">const fun = () =&gt; &#123;</span><br><span class="line">  childRef.value.childFun();// 调用子组件的方法</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script &gt;</span><br></pre></td></tr></table></figure><h2 id="子组件中"><a href="#子组件中" class="headerlink" title="子组件中"></a>子组件中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineExpose &#125; from &#x27;vue&#x27;</span><br><span class="line">const childFun = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;我是子组件方法&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">// 重点！！这里需要使用defineExpose暴露出去</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  childFun,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;父组件中&quot;&gt;&lt;a href=&quot;#父组件中&quot; class=&quot;headerlink&quot; title=&quot;父组件中&quot;&gt;&lt;/a&gt;父组件中&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL数据库学习（一）</title>
    <link href="http://example.com/2022/02/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2022/02/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-02-11T01:41:26.000Z</published>
    <updated>2022-02-22T07:41:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要数据库"><a href="#为什么需要数据库" class="headerlink" title="为什么需要数据库"></a>为什么需要数据库</h2><ul><li>任何的软件系统都需要存放大量的数据，这些数据通常是非常复杂和庞大的</li><li>数据库通俗一点来讲就是一个存储数据的仓库，数据库本质上就是一个软件、一个程序</li></ul><h2 id="常见的数据库"><a href="#常见的数据库" class="headerlink" title="常见的数据库"></a>常见的数据库</h2><h3 id="关系型数据库：MySQL、Oracle、SQL-Server"><a href="#关系型数据库：MySQL、Oracle、SQL-Server" class="headerlink" title="关系型数据库：MySQL、Oracle、SQL Server"></a>关系型数据库：<strong>MySQL</strong>、Oracle、SQL Server</h3><ul><li>关系型数据库通常我们会创建很多个二维数据表；</li><li>数据表之间相互关联起来，形成一对一、一对多、多对多等关系；</li><li>之后可以使用SQL语句在多张表中查询我们所需要的数据；</li><li>支持事务，对数据的访问更加的安全；</li></ul><h3 id="非关系型数据库：MongoDB、Redis、Memcached、HBse等"><a href="#非关系型数据库：MongoDB、Redis、Memcached、HBse等" class="headerlink" title="非关系型数据库：MongoDB、Redis、Memcached、HBse等"></a>非关系型数据库：<strong>MongoDB</strong>、Redis、Memcached、HBse等</h3><ul><li>非关系型数据库的英文是Not Only SQL(NoSQL)；</li><li>相较于关系型数据库比较简单一点，存储数据更加自由（甚至可以将一个复杂的json对象直接塞入数据库中）；</li><li>NoSQL是基于key-value的对应关系，并且查询的过程中不需要SQL解析，所以性能更高；</li><li>NoSQL通常不支持事务，需要在自己的程序中来保证一些原子性的操作；</li></ul><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><ul><li><code>mysql -u root -p</code>—进入mysql，需输入密码；</li><li><code>SHOW DATABASES;</code>—查看数据库软件里面有哪些数据库(存在四个默认的数据库)；</li><li><code>create database databaseName;</code>—创建一个数据库；</li><li><code>select database();</code>—查看自己正在使用的数据库；</li><li><code>use databaseName;</code>—使用某个数据库；</li><li><code>show tables;</code>— 查看表;</li><li><code>create table tableName;</code>—创建一个表；</li><li><code>create table tableName(name varchar(10),age int,height double);</code>—创建一个带字段的表；</li><li><code>insert into tableName (name,age,height) values &#123;&#39;kobe&#39;,20,1.88&#125;;</code></li></ul><h2 id="GUI工具的介绍"><a href="#GUI工具的介绍" class="headerlink" title="GUI工具的介绍"></a>GUI工具的介绍</h2><p>终端操作数据库太过繁琐，来个图形化工具：Navicat，SQLYog，TablePlus</p><h2 id="认识SQL语句"><a href="#认识SQL语句" class="headerlink" title="认识SQL语句"></a>认识SQL语句</h2><p>SQL是Structured Query Language，称为结构化查询语言，简称为SQL</p><h3 id="SQL语句常用规范"><a href="#SQL语句常用规范" class="headerlink" title="SQL语句常用规范"></a>SQL语句常用规范</h3><ul><li>关键字大写 CREATE、TABELE、SHOW；</li><li>一条语句结束后，需要以分号（;）结尾；</li><li>如果遇到关键字作为表明或者字段名称，可以使用``包裹；</li></ul><h3 id="SQL语句的分类"><a href="#SQL语句的分类" class="headerlink" title="SQL语句的分类"></a>SQL语句的分类</h3><h4 id="DDL：数据定义语言"><a href="#DDL：数据定义语言" class="headerlink" title="DDL：数据定义语言"></a>DDL：数据定义语言</h4><ul><li>可以通过DDL语句对数据库或者表进行：创建、删除、修改等操作</li></ul><h5 id="对数据库进行操作"><a href="#对数据库进行操作" class="headerlink" title="对数据库进行操作"></a>对数据库进行操作</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有的数据库</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"></span><br><span class="line"># 选择某一个数据库</span><br><span class="line">USE bili;</span><br><span class="line"></span><br><span class="line"># 查看当前正在使用的数据库</span><br><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br><span class="line"></span><br><span class="line"># 创建一个新的数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE douyu;</span><br><span class="line"># 真实开发的时候创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> douyu;</span><br><span class="line"># 指定编格式和排序规则</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> huya <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci;</span><br><span class="line"># 删除数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> douyu;</span><br><span class="line"># 修改数据库的编码</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE huya <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 </span><br><span class="line"><span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_unicode_ci;</span><br></pre></td></tr></table></figure><h5 id="对表进行操作"><a href="#对表进行操作" class="headerlink" title="对表进行操作"></a>对表进行操作</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有的表</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line"># 新建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `students` (</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>,</span><br><span class="line">  `score` <span class="type">int</span>,</span><br><span class="line">  `height` <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>), <span class="comment">-- 表示存储两个小数点</span></span><br><span class="line">  `birthday` <span class="keyword">YEAR</span>, <span class="comment">-- 年份范围1901-2155</span></span><br><span class="line">  `phoneNum` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- DATE类型：YYYY-MM-DD</span></span><br><span class="line"><span class="comment">-- DATETIME &amp; TIMESTAMP类型：YYYY-MM-DD hh:mm:ss</span></span><br><span class="line"># 删除表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `moment`;</span><br><span class="line"></span><br><span class="line"># 查看表的结构</span><br><span class="line"><span class="keyword">DESC</span> students;</span><br><span class="line"># 查看创建表的<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `students`;</span><br><span class="line"><span class="comment">-- CREATE TABLE `students` (</span></span><br><span class="line"><span class="comment">--   `name` varchar(10) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">--   `age` int DEFAULT NULL,</span></span><br><span class="line"><span class="comment">--   `score` int DEFAULT NULL</span></span><br><span class="line"><span class="comment">-- ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span></span><br><span class="line"></span><br><span class="line"># 完整的创建表的语法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `users`(</span><br><span class="line">  `id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  `phoneNum` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `createTime` <span class="type">TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 修改表</span><br><span class="line"># <span class="number">1.</span>修改表的名字</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `users` RENAME <span class="keyword">TO</span> `<span class="keyword">user</span>`;</span><br><span class="line"># <span class="number">2.</span>添加一个新的列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> `updateTime` <span class="type">TIMESTAMP</span>;</span><br><span class="line"># <span class="number">3.</span>修改字段的名称</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` CHANGE `phoneNum` `telPhone` <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br><span class="line"># <span class="number">4.</span>修改字段的类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` MODIFY `name` <span class="type">VARCHAR</span>(<span class="number">30</span>);</span><br><span class="line"># <span class="number">5.</span>删除某一个字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` <span class="keyword">DROP</span> `age`;</span><br><span class="line"></span><br><span class="line"># 补充</span><br><span class="line"># 根据一个表结构去创建另外一张表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user2` <span class="keyword">LIKE</span> `<span class="keyword">user</span>`;</span><br><span class="line"># 根据另外一个表中的所有内容，创建一个新的表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user3` <span class="keyword">AS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`); <span class="comment">--As可以省略</span></span><br></pre></td></tr></table></figure><h4 id="DML：数据操作语言"><a href="#DML：数据操作语言" class="headerlink" title="DML：数据操作语言"></a>DML：数据操作语言</h4><ul><li>可以通过DML语句对数据库或者表进行：添加、删除、修改等操作</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># DML</span><br><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">110</span>, <span class="string">&#x27;why&#x27;</span>, <span class="string">&#x27;020-110110&#x27;</span>, <span class="string">&#x27;2020-10-20&#x27;</span>, <span class="string">&#x27;2020-11-11&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (name, telPhone, createTime, updateTime) <span class="keyword">VALUES</span> (<span class="string">&#x27;kobe&#x27;</span>, <span class="string">&#x27;000-1111111&#x27;</span>, <span class="string">&#x27;2020-10-10&#x27;</span>, <span class="string">&#x27;2030-10-20&#x27;</span>);</span><br><span class="line">      </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (name, telPhone) <span class="keyword">VALUES</span> (<span class="string">&#x27;lilei&#x27;</span>, <span class="string">&#x27;000-1111112&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 需求：createTime和updateTime可以自动设置值</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` MODIFY `createTime` <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` MODIFY `updateTime` <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (name, telPhone) <span class="keyword">VALUES</span> (<span class="string">&#x27;hmm&#x27;</span>, <span class="string">&#x27;000-1111212&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (name, telPhone) <span class="keyword">VALUES</span> (<span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;000-1121212&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除数据</span><br><span class="line"># 删除所有的数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br><span class="line"># 删除符合条件的数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"># 更新数据</span><br><span class="line"># 更新所有的数据</span><br><span class="line">UPDATE `<span class="keyword">user</span>` <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;lily&#x27;</span>, telPhone <span class="operator">=</span> <span class="string">&#x27;010-110110&#x27;</span>;</span><br><span class="line"># 更新符合条件的数据</span><br><span class="line">UPDATE `<span class="keyword">user</span>` <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;lily&#x27;</span>, telPhone <span class="operator">=</span> <span class="string">&#x27;010-110110&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">115</span>;</span><br></pre></td></tr></table></figure><h4 id="DQL：数据查询语言"><a href="#DQL：数据查询语言" class="headerlink" title="DQL：数据查询语言"></a>DQL：数据查询语言</h4><ul><li>可以通过DQL语句从数据库中查询记录；（重点）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"># 创建products的表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `products` (</span><br><span class="line"> id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line"> brand <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"> title <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> price <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> score <span class="type">DECIMAL</span>(<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line"> voteCnt <span class="type">INT</span>,</span><br><span class="line"> url <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line"> pid <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># <span class="number">1.</span>基本查询</span><br><span class="line"># 查询表中所有的字段以及所有的数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products`; <span class="comment">-- * 通配符，所有的字段和数据都会被查询</span></span><br><span class="line"># 查询指定的字段</span><br><span class="line"><span class="keyword">SELECT</span> title, price <span class="keyword">FROM</span> `products`;</span><br><span class="line"># 对字段结果起一个别名</span><br><span class="line"><span class="keyword">SELECT</span> title <span class="keyword">AS</span> phoneTitle, price <span class="keyword">AS</span> currentPrice <span class="keyword">FROM</span> `products`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span><span class="keyword">where</span>条件</span><br><span class="line"># <span class="number">2.1</span>. 条件判断语句</span><br><span class="line"># 案例：查询价格小于<span class="number">1000</span>的手机</span><br><span class="line"><span class="keyword">SELECT</span> title, price <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">1000</span>;</span><br><span class="line"># 案例二：价格等于<span class="number">999</span>的手机</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> price <span class="operator">=</span> <span class="number">999</span>;</span><br><span class="line"># 案例三：价格不等于<span class="number">999</span>的手机</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> price <span class="operator">!=</span> <span class="number">999</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> price <span class="operator">&lt;&gt;</span> <span class="number">999</span>;</span><br><span class="line"># 案例四：查询品牌是华为的手机</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> brand <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">2.2</span>. 逻辑运算语句</span><br><span class="line"># 案例一：查询<span class="number">1000</span>到<span class="number">2000</span>之间的手机</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> price <span class="operator">&gt;</span> <span class="number">1000</span> <span class="keyword">AND</span> price <span class="operator">&lt;</span> <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> price <span class="operator">&gt;</span> <span class="number">1000</span> <span class="operator">&amp;&amp;</span> price <span class="operator">&lt;</span> <span class="number">2000</span>;</span><br><span class="line"># <span class="keyword">BETWEEN</span> <span class="keyword">AND</span> 包含等于</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">1099</span> <span class="keyword">AND</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"># 案例二：价格在<span class="number">5000</span>以上或者是品牌是华为的手机</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> price <span class="operator">&gt;</span> <span class="number">5000</span> <span class="operator">||</span> brand <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 将某些值设置为<span class="keyword">NULL</span></span><br><span class="line"><span class="comment">-- UPDATE `products` SET url = NULL WHERE id &gt;= 85 and id &lt;= 88;</span></span><br><span class="line"># 查询某一个值为<span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> url <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- SELECT * FROM `products` WHERE url = NULL;</span></span><br><span class="line"><span class="comment">-- SELECT * FROM `products` WHERE url IS NOT NULL;</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2.3</span>.模糊查询</span><br><span class="line"><span class="comment">-- %表示匹配任意个的任意字符</span></span><br><span class="line"><span class="comment">-- _表示匹配一个的任意字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> title <span class="keyword">LIKE</span> <span class="string">&#x27;%M%&#x27;</span>; <span class="comment">-- 查询所有带M的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> title <span class="keyword">LIKE</span> <span class="string">&#x27;%P%&#x27;</span>; <span class="comment">-- 查询所有带P的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> title <span class="keyword">LIKE</span> <span class="string">&#x27;_P%&#x27;</span>; <span class="comment">-- 查询第一个字符是任意的，第二个字符必须带P</span></span><br><span class="line"># <span class="number">2.4</span>.对结果进行查询</span><br><span class="line"><span class="comment">-- IN表示提取多个值中的其中一个即可</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> brand <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span> <span class="operator">||</span> brand <span class="operator">=</span> <span class="string">&#x27;小米&#x27;</span> <span class="operator">||</span> brand <span class="operator">=</span> <span class="string">&#x27;苹果&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> brand <span class="keyword">IN</span> (<span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>)</span><br><span class="line"># <span class="number">3.</span>对结果进行排序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> brand <span class="keyword">IN</span> (<span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">ASC</span>, score <span class="keyword">DESC</span>; <span class="comment">--ASC升序  DESC降序</span></span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span>分页查询</span><br><span class="line"># LIMIT limitNumber <span class="keyword">OFFSET</span> offsetNumber;</span><br><span class="line"># Limit offsetNumber, limitNumber;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` LIMIT <span class="number">20</span> <span class="keyword">OFFSET</span> <span class="number">0</span>; <span class="comment">--查询0-20的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` LIMIT <span class="number">20</span> <span class="keyword">OFFSET</span> <span class="number">20</span>; <span class="comment">-- 查询21到40的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` LIMIT <span class="number">40</span>, <span class="number">20</span>; <span class="comment">-- 查询21到40的数据</span></span><br></pre></td></tr></table></figure><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><ul><li>聚合函数表示对值集合进行操作的组（集合）函数</li><li>聚合函数默认情况下将整张表的数据堪称一组数据，对这一组数据进行操作，这个操作就是聚合函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>聚合函数的使用</span><br><span class="line"># 求所有手机的价格的总和</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(price) <span class="keyword">AS</span> totalPrice <span class="keyword">FROM</span> `products`; <span class="comment">-- AS可以省略</span></span><br><span class="line"># 求一下华为手机的价格的总和</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(price) <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> brand <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>; </span><br><span class="line"># 求华为手机的平均价格</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> brand <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>;</span><br><span class="line"># 最高手机的价格和最低手机的价格</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(price) <span class="keyword">FROM</span> `products`;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(price) <span class="keyword">FROM</span> `products`;</span><br><span class="line"></span><br><span class="line"># 求华为手机的个数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> brand <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> brand <span class="operator">=</span> <span class="string">&#x27;苹果&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(url) <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> brand <span class="operator">=</span> <span class="string">&#x27;苹果&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(price) <span class="keyword">FROM</span> `products`;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> price) <span class="keyword">FROM</span> `products`; <span class="comment">-- 价格不重复</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span><span class="keyword">GROUP</span> <span class="keyword">BY</span>的使用</span><br><span class="line"><span class="comment">-- 进行分组</span></span><br><span class="line"><span class="keyword">SELECT</span> brand, <span class="built_in">AVG</span>(price), <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> `products` <span class="keyword">GROUP</span> <span class="keyword">BY</span> brand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span><span class="keyword">HAVING</span>的使用</span><br><span class="line"><span class="comment">-- HAVING可以对分组查询之后进行筛选，WHERE不可以</span></span><br><span class="line"><span class="keyword">SELECT</span> brand, <span class="built_in">AVG</span>(price) avgPrice, <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> `products` <span class="keyword">GROUP</span> <span class="keyword">BY</span> brand <span class="keyword">HAVING</span> avgPrice <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span>需求：求评分score <span class="operator">&gt;</span> <span class="number">7.5</span>的手机的，平均价格是多少？</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> score <span class="operator">&gt;</span> <span class="number">7.5</span></span><br><span class="line"># <span class="number">4.1</span> 升级：平均分大于<span class="number">7.5</span>的手机，按照品牌进行分类，求出平均价格。</span><br><span class="line"><span class="keyword">SELECT</span> brand, <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> `products` <span class="keyword">WHERE</span> score <span class="operator">&gt;</span> <span class="number">7.5</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> brand;</span><br></pre></td></tr></table></figure><h5 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>创建brand的表和插入数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `brand`(</span><br><span class="line"> id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line"> name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> website <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line"> phoneRank <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `brand` (name, website, phoneRank) <span class="keyword">VALUES</span> (<span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;www.huawei.com&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `brand` (name, website, phoneRank) <span class="keyword">VALUES</span> (<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;www.apple.com&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `brand` (name, website, phoneRank) <span class="keyword">VALUES</span> (<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;www.mi.com&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `brand` (name, website, phoneRank) <span class="keyword">VALUES</span> (<span class="string">&#x27;oppo&#x27;</span>, <span class="string">&#x27;www.oppo.com&#x27;</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `brand` (name, website, phoneRank) <span class="keyword">VALUES</span> (<span class="string">&#x27;京东&#x27;</span>, <span class="string">&#x27;www.jd.com&#x27;</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `brand` (name, website, phoneRank) <span class="keyword">VALUES</span> (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;www.google.com&#x27;</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>给brand_id设置引用brand中的id的外键约束</span><br><span class="line"># 添加一个brand_id字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `products` <span class="keyword">ADD</span> `brand_id` <span class="type">INT</span>;</span><br><span class="line"><span class="comment">-- ALTER TABLE `products` DROP `brand_id`;</span></span><br><span class="line"></span><br><span class="line"># 修改brand_id为外键</span><br><span class="line"><span class="comment">-- 可以在创建表的时候表示</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `products` <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(brand_id) <span class="keyword">REFERENCES</span> brand(id);</span><br><span class="line"></span><br><span class="line"># 设置brand_id的值</span><br><span class="line">UPDATE `products` <span class="keyword">SET</span> `brand_id` <span class="operator">=</span> <span class="number">1</span> <span class="keyword">WHERE</span> `brand` <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>;</span><br><span class="line">UPDATE `products` <span class="keyword">SET</span> `brand_id` <span class="operator">=</span> <span class="number">2</span> <span class="keyword">WHERE</span> `brand` <span class="operator">=</span> <span class="string">&#x27;苹果&#x27;</span>;</span><br><span class="line">UPDATE `products` <span class="keyword">SET</span> `brand_id` <span class="operator">=</span> <span class="number">3</span> <span class="keyword">WHERE</span> `brand` <span class="operator">=</span> <span class="string">&#x27;小米&#x27;</span>;</span><br><span class="line">UPDATE `products` <span class="keyword">SET</span> `brand_id` <span class="operator">=</span> <span class="number">4</span> <span class="keyword">WHERE</span> `brand` <span class="operator">=</span> <span class="string">&#x27;oppo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span>修改和删除外键引用的id</span><br><span class="line">UPDATE `brand` <span class="keyword">SET</span> `id` <span class="operator">=</span> <span class="number">100</span> <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 报错，被外键引用，无法修改无法删除</span></span><br><span class="line"># <span class="number">4.</span>修改brand_id关联外键时的action</span><br><span class="line"><span class="comment">-- 分3步走</span></span><br><span class="line"># <span class="number">4.1</span>.获取到目前的外键的名称</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `products`;</span><br><span class="line"><span class="comment">-- CREATE TABLE `products` (</span></span><br><span class="line"><span class="comment">--   `id` int NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="comment">--   `brand` varchar(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">--   `title` varchar(100) NOT NULL,</span></span><br><span class="line"><span class="comment">--   `price` double NOT NULL,</span></span><br><span class="line"><span class="comment">--   `score` decimal(2,1) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">--   `voteCnt` int DEFAULT NULL,</span></span><br><span class="line"><span class="comment">--   `url` varchar(100) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">--   `pid` int DEFAULT NULL,</span></span><br><span class="line"><span class="comment">--   `brand_id` int DEFAULT NULL,</span></span><br><span class="line"><span class="comment">--   PRIMARY KEY (`id`),</span></span><br><span class="line"><span class="comment">--   KEY `brand_id` (`brand_id`),</span></span><br><span class="line"><span class="comment">--   CONSTRAINT `products_ibfk_1` FOREIGN KEY (`brand_id`) REFERENCES `brand` (`id`)</span></span><br><span class="line"><span class="comment">-- ) ENGINE=InnoDB AUTO_INCREMENT=109 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span></span><br><span class="line"></span><br><span class="line"># <span class="number">4.2</span>.根据名称将外键删除掉</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `products` <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY products_ibfk_1;</span><br><span class="line"></span><br><span class="line"># <span class="number">4.3</span>.重新添加外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `products` <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY (brand_id) <span class="keyword">REFERENCES</span> brand(id) <span class="keyword">ON</span> UPDATE CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT; <span class="comment">-- 删除最好使用RESTRICT，其他的非常危险</span></span><br><span class="line">UPDATE `brand` <span class="keyword">SET</span> `id` <span class="operator">=</span> <span class="number">100</span> <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h6 id="如何进行多表查询呢"><a href="#如何进行多表查询呢" class="headerlink" title="如何进行多表查询呢"></a>如何进行多表查询呢</h6><ul><li>使用SQL JOIN 进行多表查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>获取到的是笛卡尔乘积</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products`, `brand`;</span><br><span class="line"># 获取到的是笛卡尔乘积进行筛选</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products`, `brand` <span class="keyword">WHERE</span> products.brand_id <span class="operator">=</span> brand.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用SQL JOIN</span></span><br><span class="line"># <span class="number">2.</span>左连接</span><br><span class="line"># <span class="number">2.1</span>. 查询所有的手机（包括没有品牌信息的手机）以及对应的品牌 <span class="keyword">null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id;</span><br><span class="line"></span><br><span class="line"># <span class="number">2.2</span>. 查询没有对应品牌数据的手机</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id <span class="keyword">WHERE</span> brand.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- SELECT * FROM `products` LEFT JOIN `brand` ON products.brand_id = brand.id WHERE brand_id IS NULL;  这样写有些情况会有问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span>右连接</span><br><span class="line"># <span class="number">3.1</span>. 查询所有的品牌（没有对应的手机数据，品牌也显示）以及对应的手机数据；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.2</span>. 查询没有对应手机的品牌信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id <span class="keyword">WHERE</span> products.brand_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span>内连接</span><br><span class="line">## <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">or</span> <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> <span class="keyword">or</span> <span class="keyword">JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id <span class="keyword">WHERE</span> price <span class="operator">=</span> <span class="number">8699</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">5.</span>全连接</span><br><span class="line">## mysql是不支持 <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id; <span class="comment">-- put error</span></span><br><span class="line"></span><br><span class="line">## 左连接和右连接进行联合</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id)</span><br><span class="line"></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id <span class="keyword">WHERE</span> brand.id <span class="keyword">IS</span> <span class="keyword">NULL</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `products` <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> `brand` <span class="keyword">ON</span> products.brand_id <span class="operator">=</span> brand.id <span class="keyword">WHERE</span> products.brand_id <span class="keyword">IS</span> <span class="keyword">NULL</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="DCL：数据控制语言"><a href="#DCL：数据控制语言" class="headerlink" title="DCL：数据控制语言"></a>DCL：数据控制语言</h4><ul><li>可以通过DCL语句对数据库、表的权限进行相关访问控制操作；</li></ul><h3 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h3><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><ul><li>一张表中，为了区分每一条记录的唯一性，必须有一个字段是永远不会重复和为空的，这个字段我们通常会将它设置为主键；</li><li>主键是表中唯一的索引；</li><li>主键必须是NOT NULL,如果没有设置NOT NULL，MySQL也会隐性的设置为NOT NULL；</li><li>主键也可以是多列索引，PRIMARY KEY(key_part,…),一般称之为联合主键</li><li><strong>主键应该是和业务无关的，尽量不要使用业务字段来作为主键</strong></li></ul><h4 id="唯一UNIQUE"><a href="#唯一UNIQUE" class="headerlink" title="唯一UNIQUE"></a>唯一UNIQUE</h4><ul><li>不能重复</li></ul><h4 id="不能为空"><a href="#不能为空" class="headerlink" title="不能为空"></a>不能为空</h4><ul><li>NOT NULL</li></ul><h4 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h4><ul><li>设置默认值</li></ul><h4 id="自动递增AUTO-INCREMENT"><a href="#自动递增AUTO-INCREMENT" class="headerlink" title="自动递增AUTO_INCREMENT"></a>自动递增AUTO_INCREMENT</h4><h3 id="多对多的关系"><a href="#多对多的关系" class="headerlink" title="多对多的关系"></a>多对多的关系</h3><p>比如学生可以选择多门课程，一个课程也可以被多个学生选择,多对多的表中，一般会建立一个关系表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>基本数据的模拟</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> students(</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> courses(</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  price <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students` (name, age) <span class="keyword">VALUES</span>(<span class="string">&#x27;why&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students` (name, age) <span class="keyword">VALUES</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students` (name, age) <span class="keyword">VALUES</span>(<span class="string">&#x27;lilei&#x27;</span>, <span class="number">25</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students` (name, age) <span class="keyword">VALUES</span>(<span class="string">&#x27;lucy&#x27;</span>, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students` (name, age) <span class="keyword">VALUES</span>(<span class="string">&#x27;lily&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `courses` (name, price) <span class="keyword">VALUES</span> (<span class="string">&#x27;英语&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `courses` (name, price) <span class="keyword">VALUES</span> (<span class="string">&#x27;语文&#x27;</span>, <span class="number">666</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `courses` (name, price) <span class="keyword">VALUES</span> (<span class="string">&#x27;数学&#x27;</span>, <span class="number">888</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `courses` (name, price) <span class="keyword">VALUES</span> (<span class="string">&#x27;历史&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `courses` (name, price) <span class="keyword">VALUES</span> (<span class="string">&#x27;物理&#x27;</span>, <span class="number">888</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `courses` (name, price) <span class="keyword">VALUES</span> (<span class="string">&#x27;地理&#x27;</span>, <span class="number">333</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>建立关系表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `students_select_courses`(</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  student_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  course_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY (student_id) <span class="keyword">REFERENCES</span> students(id) <span class="keyword">ON</span> UPDATE CASCADE,</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY (course_id) <span class="keyword">REFERENCES</span> courses(id) <span class="keyword">ON</span> UPDATE CASCADE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span>学生选课</span><br><span class="line"># why选择了英文、数学、历史</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students_select_courses` (student_id, course_id) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students_select_courses` (student_id, course_id) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students_select_courses` (student_id, course_id) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students_select_courses` (student_id, course_id) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students_select_courses` (student_id, course_id) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students_select_courses` (student_id, course_id) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students_select_courses` (student_id, course_id) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students_select_courses` (student_id, course_id) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span>查询的需求</span><br><span class="line"># <span class="number">4.1</span>. 查询所有有选课的学生，选择了哪些课程</span><br><span class="line"><span class="keyword">SELECT</span> stu.id id, stu.name stuName, stu.age stuAge, cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line"><span class="keyword">FROM</span> `students` stu</span><br><span class="line"><span class="keyword">JOIN</span> `students_select_courses` ssc <span class="keyword">ON</span> stu.id <span class="operator">=</span> ssc.student_id</span><br><span class="line"><span class="keyword">JOIN</span> `courses` cs <span class="keyword">ON</span> ssc.course_id <span class="operator">=</span> cs.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">4.2</span>. 查询所有的学生的选课情况</span><br><span class="line"><span class="keyword">SELECT</span> stu.id id, stu.name stuName, stu.age stuAge, cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line"><span class="keyword">FROM</span> `students` stu</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `students_select_courses` ssc <span class="keyword">ON</span> stu.id <span class="operator">=</span> ssc.student_id;</span><br><span class="line"></span><br><span class="line"># <span class="number">4.3</span>. 哪些学生是没有选课</span><br><span class="line"><span class="keyword">SELECT</span> stu.id id, stu.name stuName, stu.age stuAge, cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line"><span class="keyword">FROM</span> `students` stu</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `students_select_courses` ssc <span class="keyword">ON</span> stu.id <span class="operator">=</span> ssc.student_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `courses` cs <span class="keyword">ON</span> ssc.course_id <span class="operator">=</span> cs.id</span><br><span class="line"><span class="keyword">WHERE</span> cs.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">4.4</span>. 查询哪些课程是没有被选择的</span><br><span class="line"><span class="keyword">SELECT</span> stu.id id, stu.name stuName, stu.age stuAge, cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line"><span class="keyword">FROM</span> `students` stu</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `students_select_courses` ssc <span class="keyword">ON</span> stu.id <span class="operator">=</span> ssc.student_id</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `courses` cs <span class="keyword">ON</span> ssc.course_id <span class="operator">=</span> cs.id</span><br><span class="line"><span class="keyword">WHERE</span> stu.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;;</span><br><span class="line"></span><br><span class="line"># <span class="number">4.5</span>. 某一个学生选了哪些课程（why）</span><br><span class="line"><span class="keyword">SELECT</span> stu.id id, stu.name stuName, stu.age stuAge, cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line"><span class="keyword">FROM</span> `students` stu</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `students_select_courses` ssc <span class="keyword">ON</span> stu.id <span class="operator">=</span> ssc.student_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `courses` cs <span class="keyword">ON</span> ssc.course_id <span class="operator">=</span> cs.id</span><br><span class="line"><span class="keyword">WHERE</span> stu.id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么需要数据库&quot;&gt;&lt;a href=&quot;#为什么需要数据库&quot; class=&quot;headerlink&quot; title=&quot;为什么需要数据库&quot;&gt;&lt;/a&gt;为什么需要数据库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;任何的软件系统都需要存放大量的数据，这些数据通常是非常复杂和庞大的&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="MySQL 数据库" scheme="http://example.com/tags/MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>koa框架</title>
    <link href="http://example.com/2022/02/10/koa%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2022/02/10/koa%E6%A1%86%E6%9E%B6/</id>
    <published>2022-02-10T06:31:56.000Z</published>
    <updated>2022-02-11T01:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识koa"><a href="#认识koa" class="headerlink" title="认识koa"></a>认识koa</h2><p>koa旨在为Web应用程序和API提供更小、更丰富和更强大的能力；</p><h3 id="koa初体验"><a href="#koa初体验" class="headerlink" title="koa初体验"></a>koa初体验</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(<span class="function">(<span class="params">context, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// context.request-----context.response</span></span><br><span class="line">  context.response.body = <span class="string">&quot;hello kor~&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;中间件被执行~&#x27;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="koa中间件"><a href="#koa中间件" class="headerlink" title="koa中间件"></a>koa中间件</h2><ul><li>koa不提供app.get or app.post 等的方式注册中间件</li><li>koa不提供连续注册中间件方式注册中间件</li><li>koa只能使用app.use的方式注册中间件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(<span class="function">(<span class="params">context, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context.request.url === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(context.request.method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">      context.response.body = <span class="string">&quot;welcome back~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    context.response.body = <span class="string">&quot;faile~&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="koa路由"><a href="#koa路由" class="headerlink" title="koa路由"></a>koa路由</h2><ul><li>创建一个users.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install koa-router</span></span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;<span class="attr">prefix</span>: <span class="string">&#x27;/users&#x27;</span>&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">context, next</span>)=&gt;</span>&#123;</span><br><span class="line">  context.response.body = <span class="string">&quot;get request~&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">router.put(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">context, next</span>)=&gt;</span>&#123;</span><br><span class="line">  context.response.body = <span class="string">&quot;put request~&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><ul><li>在服务器.js中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/user&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(userRouter.routes())</span><br><span class="line">app.use(userRouter.allowedMethods()) <span class="comment">//会表示router里面出现的请求方法才会被实现，其他的方法会返回错误信息</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参数解析-params-query"><a href="#参数解析-params-query" class="headerlink" title="参数解析 params-query"></a>参数解析 params-query</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.requset.url);</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.requset.query);</span><br><span class="line">  ctx.response.body = <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>解析params</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;<span class="attr">prefix</span>: <span class="string">&#x27;/users&#x27;</span>&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/:id&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.requset.query);</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.requset.params);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(userRouter.routes())</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参数解析json-urlencoded"><a href="#参数解析json-urlencoded" class="headerlink" title="参数解析json-urlencoded"></a>参数解析json-urlencoded</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="comment">// npm install koa-bodyparser</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;koa-multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> upload = multer();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(bodyParser())</span><br><span class="line">app.use(upload.any())</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.requset.body);</span><br><span class="line">  ctx.response.body = <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据的响应"><a href="#数据的响应" class="headerlink" title="数据的响应"></a>数据的响应</h2><h3 id="body将响应主体设置为以下之一"><a href="#body将响应主体设置为以下之一" class="headerlink" title="body将响应主体设置为以下之一"></a>body将响应主体设置为以下之一</h3><ul><li>string</li><li>Buffer</li><li>Stream: 流数据</li><li>Object|Array</li><li>null</li><li>如果response.status尚未设置，Koa会自动将状态设置为200或204</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置状态码</span></span><br><span class="line">  ctx.response.status = <span class="number">200</span>;</span><br><span class="line">  ctx.status = <span class="number">200</span>;</span><br><span class="line">  <span class="comment">//响应数据</span></span><br><span class="line">  <span class="comment">// ctx.response.body = &quot;hello&quot;;</span></span><br><span class="line">  <span class="comment">// ctx.response.body = &#123;name:&quot;zhangsan&quot;, age:18&#125;;</span></span><br><span class="line">  <span class="comment">// ctx.response.body =[1, 2, 3];</span></span><br><span class="line">  ctx.body =[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="传回静态资源"><a href="#传回静态资源" class="headerlink" title="传回静态资源"></a>传回静态资源</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> staticAssets = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(staticAssets(<span class="string">&#x27;./build&#x27;</span>));</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="koa错误处理方式"><a href="#koa错误处理方式" class="headerlink" title="koa错误处理方式"></a>koa错误处理方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">    ctx.app.emit(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;No Login！&quot;</span>)) <span class="comment">//发送事件，不会阻塞</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err, ctx</span>)=&gt;</span>&#123;</span><br><span class="line">  ctx.status = <span class="number">401</span>;</span><br><span class="line">  ctx.body = err.message;</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="koa洋葱模型"><a href="#koa洋葱模型" class="headerlink" title="koa洋葱模型"></a>koa洋葱模型</h2><h3 id="两层理解含义"><a href="#两层理解含义" class="headerlink" title="两层理解含义"></a>两层理解含义</h3><ul><li>中间件处理代码的过程；</li><li>Response返回body执行；</li></ul><p><a href="https://imgtu.com/i/HUeQl8"><img src="https://s4.ax1x.com/2022/02/11/HUeQl8.jpg" alt="HUeQl8.jpg"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 打印结果为： 1 3 4 2</span></span><br><span class="line"><span class="comment">* 当打印结束后才会返回 Hello World</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识koa&quot;&gt;&lt;a href=&quot;#认识koa&quot; class=&quot;headerlink&quot; title=&quot;认识koa&quot;&gt;&lt;/a&gt;认识koa&lt;/h2&gt;&lt;p&gt;koa旨在为Web应用程序和API提供更小、更丰富和更强大的能力；&lt;/p&gt;
&lt;h3 id=&quot;koa初体验&quot;&gt;&lt;a h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>window增加hyper-v</title>
    <link href="http://example.com/2022/02/09/window%E5%A2%9E%E5%8A%A0hyper-v/"/>
    <id>http://example.com/2022/02/09/window%E5%A2%9E%E5%8A%A0hyper-v/</id>
    <published>2022-02-09T02:34:54.000Z</published>
    <updated>2022-02-09T02:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为windows增加hyper-v的方法"><a href="#为windows增加hyper-v的方法" class="headerlink" title="为windows增加hyper-v的方法"></a>为windows增加hyper-v的方法</h2><ul><li>新建hyper-v.txt</li><li>输入以下内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line">dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class="line">for /f %%i in (&#x27;findstr /i . hyper-v.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;</span><br><span class="line">del hyper-v.txt</span><br><span class="line">Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL</span><br></pre></td></tr></table></figure><ul><li>将hyper-v.txt的后缀名更改为.cmd</li><li>以管理员身份运行</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为windows增加hyper-v的方法&quot;&gt;&lt;a href=&quot;#为windows增加hyper-v的方法&quot; class=&quot;headerlink&quot; title=&quot;为windows增加hyper-v的方法&quot;&gt;&lt;/a&gt;为windows增加hyper-v的方法&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less-study</title>
    <link href="http://example.com/2022/02/08/less-study/"/>
    <id>http://example.com/2022/02/08/less-study/</id>
    <published>2022-02-08T09:00:27.000Z</published>
    <updated>2022-02-08T09:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>以//开头的注释不会编译到css文件中，但是/*开头的注释会被编译到css文件中</li></ul><h2 id="less变量variable"><a href="#less变量variable" class="headerlink" title="less变量variable"></a>less变量variable</h2><ul><li>在样式表中多次被引用的值可以将其定义为变量这样就易于维护</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#5b83ad</span>; <span class="comment">/*用@定义一个变量*/</span></span><br><span class="line"><span class="variable">@add-color:</span> <span class="variable">@color</span> + <span class="number">#111111</span>; <span class="comment">/*颜色可以进行加减*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@add-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也可以用变量名定义变量</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> red;</span><br><span class="line"><span class="variable">@color2:</span> <span class="string">&quot;color&quot;</span>; <span class="comment">//这里写的必须是变量名 类似于二级指针</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@@color2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@news:</span> <span class="string">&quot;this is news&quot;</span></span><br><span class="line"><span class="variable">@message</span>: <span class="string">&quot;news&quot;</span></span><br><span class="line">div &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">@@message</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义一个URL"><a href="#定义一个URL" class="headerlink" title="定义一个URL"></a>定义一个URL</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@imgURL:</span> <span class="string">&#x27;../img&#x27;</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">@imgURL</span>);</span><br><span class="line">  <span class="comment">//background: url(&quot;@imgURL&quot;);</span></span><br><span class="line">  <span class="comment">//加不加引号不影响最终结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义引入声明标准写法"><a href="#定义引入声明标准写法" class="headerlink" title="定义引入声明标准写法"></a>定义引入声明标准写法</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@themes:</span> <span class="string">&quot;./../lessStudy&quot;</span>;  <span class="comment">//定义一个根路径变量</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;@themes/demo.css&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="可变插值"><a href="#可变插值" class="headerlink" title="可变插值"></a>可变插值</h2><ul><li>@{}可以引用一个变量使其插入到样式，也可以插入类名</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@my-selector:</span> banner;</span><br><span class="line"><span class="variable">@widthPro:</span> width;</span><br><span class="line"><span class="selector-class">.@&#123;my-selector&#125;</span> &#123;</span><br><span class="line">  @&#123;widthPro&#125;: <span class="selector-tag">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转义"><a href="#转义" class="headerlink" title="转义~"></a>转义~</h2><ul><li>转义允许将任何字符串作为属性值或变量值  </li></ul><p><strong>除了插值外，里面的任何字符将原样输出</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">~&quot;/*something just like this*/&quot;</span>; </span><br><span class="line">  <span class="attribute">width</span>: <span class="string">~&quot;10px&quot;</span>; <span class="comment">// width: 10px;</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="string">~&quot;20px&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul><li>在css属性集中使用的变量总是在当前作用域中先去查找数据，如果没有找到，则会去他的上一级寻找，直到找到为止</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="variable">@var:</span> white;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="variable">@var:</span> blue;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>;</span><br><span class="line">    <span class="variable">@var:</span> yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@var</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;以//开头的注释不会编译到css文件中，但是/*开头的注释会被编译到css文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;less</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>express框架</title>
    <link href="http://example.com/2022/01/13/express%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2022/01/13/express%E6%A1%86%E6%9E%B6/</id>
    <published>2022-01-13T12:09:25.000Z</published>
    <updated>2022-02-10T06:30:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识express"><a href="#认识express" class="headerlink" title="认识express"></a>认识express</h2><ul><li>安装express—<code>npm install -g express-generator</code></li><li>创建项目—<code>express workName</code></li><li>安装依赖—<code>npm install</code></li><li>启动项目—<code>node bin/www</code></li></ul><h3 id="中间件（核心）"><a href="#中间件（核心）" class="headerlink" title="中间件（核心）"></a>中间件（核心）</h3><ul><li>就是一个回调函数</li><li>express本质上事一系列中间件的调用</li><li>中间件的本质事转递express的一个回调函数<br>这个回调函数接受三个参数：请求对象（request）、响应对象(response)、next函数(在express中定义的用于执行下一个中间件的函数)</li></ul><h4 id="中间件执行的任务"><a href="#中间件执行的任务" class="headerlink" title="中间件执行的任务"></a>中间件执行的任务</h4><ul><li>执行任何代码</li><li>更改请求(request)和响应(response)对象</li><li>结束请求-响应周期（返回数据）</li><li>调用栈中的下一个中间件</li><li>如果当前中间件功能没有接受请求-响应周期，则必须调用next()将控制权传递给下一个中间件，否则请求将会被挂起</li></ul><h4 id="应用中间件"><a href="#应用中间件" class="headerlink" title="应用中间件"></a>应用中间件</h4><ul><li>app/router.use and app/router.methods</li><li>app.methods ===&gt; app.get and app.post…</li></ul><h5 id="最普通的中间件"><a href="#最普通的中间件" class="headerlink" title="最普通的中间件"></a>最普通的中间件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">//使用use的方式注册中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  next()</span><br><span class="line">  res.end(<span class="string">&#x27;common middleware&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="string">&#x27;8080&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="路径匹配中间件"><a href="#路径匹配中间件" class="headerlink" title="路径匹配中间件"></a>路径匹配中间件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">//使用use的方式注册中间件</span></span><br><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;enter home&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="string">&#x27;8080&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="路径和方法中间件"><a href="#路径和方法中间件" class="headerlink" title="路径和方法中间件"></a>路径和方法中间件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">//使用use的方式注册中间件</span></span><br><span class="line">app.get(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;path and method for home&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="string">&#x27;8080&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="注册连续中间件"><a href="#注册连续中间件" class="headerlink" title="注册连续中间件"></a>注册连续中间件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">//使用use的方式注册中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;01&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;02-1&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;, <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;02-2&#x27;</span>)</span><br><span class="line">  next() </span><br><span class="line">&#125;, <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;02-3&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;, <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;02-4&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="string">&#x27;8080&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="中间件的应用"><a href="#中间件的应用" class="headerlink" title="中间件的应用"></a>中间件的应用</h5><ul><li>一. 自己编写中间件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(<span class="function">(<span class="params">req, res. next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.headers[<span class="string">&#x27;content-type&#x27;</span>] === <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">    req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> info = <span class="built_in">JSON</span>.parse(data.toString())</span><br><span class="line">    &#125;)</span><br><span class="line">    req.body = &#123;&#125;;</span><br><span class="line">    req.body = <span class="built_in">Object</span>.assgin(&#123;&#125;, info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// req.on(&#x27;data&#x27;, (data) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(data.toString())</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">  res.end(<span class="string">&#x27;welcome back ~&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="string">&#x27;8080&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>二. 使用express内置中间件—<code>body-parser</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(express.json());</span><br><span class="line"><span class="comment">//extended为true时使用第三方库：qs</span></span><br><span class="line"><span class="comment">//extended为false时使用Node内置模块：querystring</span></span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;));</span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">  res.end(<span class="string">&#x27;welcome back ~&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="string">&#x27;8080&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>三. from-data解析</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装官方的第三方库---multer</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> upload = multer()</span><br><span class="line">app.use(upload.any());</span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">  res.end(<span class="string">&#x27;welcome back ~&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="string">&#x27;8080&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>四. from-data文件上传</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123;</span><br><span class="line">  <span class="attr">dest</span>: <span class="string">&#x27;./uploads/&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 自定义路径和文件名</span></span><br><span class="line"><span class="comment">// const upload = multer(&#123;</span></span><br><span class="line"><span class="comment">//   storage</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// const storage = multer.diskStorage(&#123;</span></span><br><span class="line"><span class="comment">//   destination: (req, file, callback) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     callback(null, &#x27;./uploads/&#x27;)</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   filename:(req, file, callback) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     callback(null, &#x27;foo.png&#x27;)</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// app.use(upload.any());  注意：不要将multer作为全局中间件使用</span></span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>,upload.any(), <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;welcome back ~&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">&#x27;/upload&#x27;</span>, upload.single(<span class="string">&#x27;key&#x27;</span>),<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.files)</span><br><span class="line">  res.end(<span class="string">&#x27;upload success!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="string">&#x27;8080&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>requset参数解析</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">&#x27;users/:id&#x27;</span>,<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params);</span><br><span class="line">  res.end(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&#x27;login&#x27;</span>,<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.query);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>response响应结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">&#x27;login&#x27;</span>,<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.status(<span class="number">200</span>) <span class="comment">//设置响应码</span></span><br><span class="line">  <span class="comment">// 返回数据第一种方法</span></span><br><span class="line">  <span class="comment">// res.type(&#x27;application/json&#x27;)</span></span><br><span class="line">  <span class="comment">// res.end(JSON.stringify(&#123;name:&quot;zhangsan&quot;,age:18&#125;))</span></span><br><span class="line">  <span class="comment">//第二种方法(用的最多)</span></span><br><span class="line">  res.json(&#123;<span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="express路由"><a href="#express路由" class="headerlink" title="express路由"></a>express路由</h3><p><strong>例子</strong>:</p><ul><li>请求所有用户信息：get/users</li><li>请求某个用户信息：get/users/:id</li><li>修改某个用户信息：post/users body {username:xx,password:xxx}</li><li>删除用户信息：delete/users/:id</li></ul><p>创建一个users.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express(<span class="string">&#x27;router&#x27;</span>);</span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.json([<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;kobe&quot;</span>,<span class="string">&quot;curry&quot;</span>])</span><br><span class="line">&#125;);</span><br><span class="line">router.get(<span class="string">&#x27;/:id&#x27;</span>,<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.json(<span class="string">`<span class="subst">$&#123;req.params.id&#125;</span>用户的信息`</span>)</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>使用user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> useRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/users&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.user(<span class="string">&quot;/users&quot;</span>,useRouter)</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="传回静态资源"><a href="#传回静态资源" class="headerlink" title="传回静态资源"></a>传回静态资源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(express.static(<span class="string">&#x27;./dist&#x27;</span>))</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="express的错误处理"><a href="#express的错误处理" class="headerlink" title="express的错误处理"></a>express的错误处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>,<span class="function">(<span class="params">req, res, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.query.username === <span class="string">&quot;xxx&quot;</span> &amp;&amp; req.query.passwrod === <span class="string">&quot;xxx&quot;</span>) &#123;</span><br><span class="line">    res.status(<span class="number">200</span>);</span><br><span class="line">    res.json(<span class="string">&quot;登录成功！&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(<span class="keyword">new</span> <span class="built_in">Error</span>(USERNAME_DOES_EXISTS));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">&#x27;/register&#x27;</span>,<span class="function">(<span class="params">req, res, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.query.username !== <span class="string">&quot;xxx&quot;</span>) &#123;</span><br><span class="line">    res.status(<span class="number">200</span>);</span><br><span class="line">    res.json(<span class="string">&quot;注册成功！&quot;</span>)；</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(<span class="keyword">new</span> <span class="built_in">Error</span>(USERNAME_ALREADY_EXISTS));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> status = <span class="number">400</span>;</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">switch</span> (err.message) &#123;</span><br><span class="line">    <span class="keyword">case</span> USERNAME_DOES_EXISTS:</span><br><span class="line">      message = <span class="string">&quot;登录失败！&quot;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> USERNAME_ALREADY_EXISTS:</span><br><span class="line">      message = <span class="string">&quot;注册失败！&quot;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span></span><br><span class="line">      message = <span class="string">&quot;Not Found!&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  res.status(status);</span><br><span class="line">  res.json(message)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="exxpress源码理解"><a href="#exxpress源码理解" class="headerlink" title="exxpress源码理解"></a>exxpress源码理解</h3><h4 id="调用express-到底创建的是什么"><a href="#调用express-到底创建的是什么" class="headerlink" title="调用express()到底创建的是什么"></a>调用express()到底创建的是什么</h4><ul><li><code>exports = module.exports = createApplication;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApplication</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    app.handle(req, res, next);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="app-listen-启动服务器"><a href="#app-listen-启动服务器" class="headerlink" title="app.listen()启动服务器"></a>app.listen()启动服务器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.listen = <span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> server = http.createServer(<span class="built_in">this</span>); <span class="comment">//this就是app</span></span><br><span class="line">  <span class="keyword">return</span> server.listen.apply(server, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="app-use-中间件-内部到底发生了什么"><a href="#app-use-中间件-内部到底发生了什么" class="headerlink" title="app.use(中间件)内部到底发生了什么"></a>app.use(中间件)内部到底发生了什么</h4><p>1</p><h4 id="用户发送了一个网络请求，中间件是如何被回调的"><a href="#用户发送了一个网络请求，中间件是如何被回调的" class="headerlink" title="用户发送了一个网络请求，中间件是如何被回调的"></a>用户发送了一个网络请求，中间件是如何被回调的</h4><h4 id="next为什么执行下一个中间件"><a href="#next为什么执行下一个中间件" class="headerlink" title="next为什么执行下一个中间件"></a>next为什么执行下一个中间件</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识express&quot;&gt;&lt;a href=&quot;#认识express&quot; class=&quot;headerlink&quot; title=&quot;认识express&quot;&gt;&lt;/a&gt;认识express&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装express—&lt;code&gt;npm install -g expre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>http原生文件上传</title>
    <link href="http://example.com/2022/01/06/http%E5%8E%9F%E7%94%9F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2022/01/06/http%E5%8E%9F%E7%94%9F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2022-01-06T12:15:31.000Z</published>
    <updated>2022-01-13T12:08:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http原生文件上传"><a href="#http原生文件上传" class="headerlink" title="http原生文件上传"></a>http原生文件上传</h2><h3 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line">cosnt fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server1 = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">&#x27;/upload&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.method === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> fw = fs.createWriteStream(<span class="string">&#x27;./foo.png&#x27;</span>, &#123; <span class="attr">flag</span>:<span class="string">&#x27;a&#x27;</span>&#125;)</span><br><span class="line">      request.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        fw.write(data)   <span class="comment">//data中会包含其他的信息，如body里面的，故这种方法写入的图片解码会不成功，导致打不开</span></span><br><span class="line">      &#125;)      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  response.end(<span class="string">&quot;1&quot;</span>) </span><br><span class="line">&#125;);</span><br><span class="line">server1.listen(<span class="number">8080</span>, <span class="string">&#x27;localhost&#x27;</span>,<span class="function">() =&gt;</span> &#123; /</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;文件上传服务器启动成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="正确示范"><a href="#正确示范" class="headerlink" title="正确示范"></a>正确示范</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line">cosnt fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;queryString&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server1 = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">&#x27;/upload&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.method === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//设置编码</span></span><br><span class="line">      request.setEncoding(<span class="string">&#x27;binary&#x27;</span>)</span><br><span class="line">      <span class="keyword">let</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">const</span> message = request.headers[<span class="string">&#x27;content-type&#x27;</span>].split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">const</span> boundry = message.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>] </span><br><span class="line">      request.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        body += data;</span><br><span class="line">      &#125;)      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  response.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//处理body</span></span><br><span class="line">    <span class="comment">//1.获取image/png</span></span><br><span class="line">    <span class="keyword">const</span> payload = qs.parse(body, <span class="string">&#x27;\r\n&#x27;</span>, <span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> type = payload[<span class="string">&#x27;Content-type&#x27;</span>]</span><br><span class="line">    <span class="comment">//2.进行截取</span></span><br><span class="line">    <span class="keyword">const</span> typeIndex = body.indexOf(type);</span><br><span class="line">    <span class="keyword">const</span> typeLength = type.length</span><br><span class="line">    <span class="keyword">let</span> imageData = body.substring(typeIndex + typeLength)</span><br><span class="line">    <span class="comment">//3.去除空格</span></span><br><span class="line">    imageData = imageData.repalce(<span class="regexp">/^\s\s*/</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">//4.截掉boundry</span></span><br><span class="line">    imageData = imageData.substing(<span class="number">0</span>, imageData.indexOf(<span class="string">`--<span class="subst">$&#123;boundry&#125;</span>--`</span>))</span><br><span class="line">    fs.writeFile(<span class="string">&#x27;/.foo.png&#x27;</span>, imageData, <span class="string">&#x27;binary&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      res.end(<span class="string">&#x27;文件上传成功！&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">server1.listen(<span class="number">8080</span>, <span class="string">&#x27;localhost&#x27;</span>,<span class="function">() =&gt;</span> &#123; /</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;文件上传服务器启动成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;http原生文件上传&quot;&gt;&lt;a href=&quot;#http原生文件上传&quot; class=&quot;headerlink&quot; title=&quot;http原生文件上传&quot;&gt;&lt;/a&gt;http原生文件上传&lt;/h2&gt;&lt;h3 id=&quot;错误示范&quot;&gt;&lt;a href=&quot;#错误示范&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>http</title>
    <link href="http://example.com/2022/01/05/http/"/>
    <id>http://example.com/2022/01/05/http/</id>
    <published>2022-01-05T12:20:59.000Z</published>
    <updated>2022-01-06T11:47:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="headers属性"><a href="#headers属性" class="headerlink" title="headers属性"></a>headers属性</h2><h3 id="headers头信息content-type"><a href="#headers头信息content-type" class="headerlink" title="headers头信息content-type"></a>headers头信息content-type</h3><ul><li>application/json表示是一个json类型</li><li>application/xml表示是一个xml类型</li><li>text/plain表示是一个文本类型</li><li>multipart/form-data表示是一个文件</li></ul><h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><h4 id="content-length"><a href="#content-length" class="headerlink" title="content-length"></a>content-length</h4><ul><li>文件的大小和长度</li></ul><h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><ul><li>http是基于TCP协议的，但是通常在进行一次请求和响应结束后会立刻中断；</li><li>在http1.0中，如果想要继续保持连接：<br>  浏览器需要在请求头中添加 connection: keep-alive；<br>  服务器需要在响应头中添加 connection:keey-alive；<br>  当客户端再次放请求时，就会使用同一个连接，直接一方中断连接；</li><li>在http1.1中，所有连接默认是 connection: keep-alive的；<br>  不同的Web服务器会有不同的保持 keep-alive的时间；<br>  Node中默认是5s中；</li></ul><h4 id="accept-encoding"><a href="#accept-encoding" class="headerlink" title="accept-encoding"></a>accept-encoding</h4><ul><li>告知服务器，客户端支持的文件压缩格式，比如js文件可以使用gzip编码，对应 .gz文件；</li></ul><h4 id="user-agent"><a href="#user-agent" class="headerlink" title="user-agent"></a>user-agent</h4><ul><li>客户端相关的信息</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;headers属性&quot;&gt;&lt;a href=&quot;#headers属性&quot; class=&quot;headerlink&quot; title=&quot;headers属性&quot;&gt;&lt;/a&gt;headers属性&lt;/h2&gt;&lt;h3 id=&quot;headers头信息content-type&quot;&gt;&lt;a href=&quot;#hea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TS_study</title>
    <link href="http://example.com/2021/12/31/TS-study/"/>
    <id>http://example.com/2021/12/31/TS-study/</id>
    <published>2021-12-31T09:27:44.000Z</published>
    <updated>2021-12-31T09:59:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ts的安装与使用"><a href="#ts的安装与使用" class="headerlink" title="ts的安装与使用"></a>ts的安装与使用</h2><ul><li>ts的安装及使用</li><li>1.cnpm i -g typescript</li><li>2.在文件夹里cmd 然后tsc –init，创建一个tsconfig.json,在此文件里将”outDir”: “./“更改为”outDir”: “./js”</li><li>3.在新建-运行任务-typescript-监视，然后vscode就会自动将.ts文件翻译成.js文件</li></ul><h2 id="ts数据的类型"><a href="#ts数据的类型" class="headerlink" title="ts数据的类型"></a>ts数据的类型</h2><ul><li>定义数组的方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str:string = <span class="string">&quot;你好 ts&quot;</span></span><br><span class="line"><span class="comment">// 第一种</span></span><br><span class="line">  <span class="keyword">let</span> arr1:number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">  <span class="built_in">console</span>.log(arr1)     <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line">  <span class="keyword">let</span> arr2:<span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">  <span class="built_in">console</span>.log(arr2)     <span class="comment">//1,2,3</span></span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line">  <span class="keyword">let</span> arr3:any[]=[<span class="number">1</span>,<span class="string">&quot;ts&quot;</span>,<span class="literal">true</span>]</span><br><span class="line">  <span class="built_in">console</span>.log(arr3)     <span class="comment">//[1,&quot;ts&quot;,true]</span></span><br><span class="line"><span class="comment">//元组类型 数组的一种（tuple）</span></span><br><span class="line">  <span class="keyword">let</span> arr4:[string,number,boolean] = [<span class="string">&quot;ts&quot;</span>,<span class="number">123</span>,<span class="literal">true</span>]</span><br><span class="line">  <span class="built_in">console</span>.log(arr4)     <span class="comment">//[&quot;ts&quot;,123,true]</span></span><br></pre></td></tr></table></figure><ul><li>枚举类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">enum flag &#123;</span><br><span class="line">  success = <span class="number">1</span>,</span><br><span class="line">  err = -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f:flag = flag.err</span><br><span class="line"><span class="built_in">console</span>.log(f) <span class="comment">// -1</span></span><br><span class="line">enum Color1 &#123;</span><br><span class="line">  red,</span><br><span class="line">  blue,</span><br><span class="line">  orange</span><br><span class="line">&#125;<span class="comment">// 若是没有赋值，则默认输出从0开始的索引值</span></span><br><span class="line"><span class="keyword">let</span> c:Color1 = Color1.red</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// 0</span></span><br><span class="line">enum Color2 &#123;</span><br><span class="line">  red,</span><br><span class="line">  blue=<span class="number">5</span>,</span><br><span class="line">  orange</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Color2.red) <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(Color2.blue) <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(Color2.orange) <span class="comment">//6</span></span><br></pre></td></tr></table></figure><ul><li>any类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> any:any = <span class="string">&quot;你好 ts&quot;</span></span><br><span class="line">any = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(any)</span><br><span class="line"><span class="comment">// 任意类型的用法：可以获取节点。</span></span><br><span class="line"><span class="comment">// let obox:any = document.getElementById(&quot;box&quot;)</span></span><br><span class="line"><span class="comment">// obox.style.color = &quot;red&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.5 undefined null 类型  是其他数据类型（never类型 ）的子类型</span></span><br><span class="line"><span class="keyword">let</span> num:number | <span class="literal">undefined</span></span><br><span class="line"><span class="comment">//定义了但未赋值，会是undefined </span></span><br></pre></td></tr></table></figure><ul><li>void 类型   表示方法没有返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run2</span>(<span class="params"></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">13</span> <span class="comment">//返回值需要是number类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>never类型 never类型的值代表从不会出现的值，这意味着声明never类型的变量只能被never类型赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> never:never</span><br><span class="line"><span class="comment">// never = 123 错误的写法</span></span><br><span class="line"><span class="comment">// never = (()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   throw new Error(&quot;err&quot;)</span></span><br><span class="line"><span class="comment">// &#125;)() </span></span><br><span class="line"><span class="comment">//正确写法  一般不经常用，可以用any代替，或者用返回值的类型代替</span></span><br></pre></td></tr></table></figure><ul><li>ts中定义函数的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:string,age:number</span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>--<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = getInfo(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="comment">// 可选参数    es5中形参和实参的数量可以不一样，但是ts需要相同，如果不同，需要使用可选参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInfo1</span>(<span class="params">name:string,age?:number</span>):<span class="title">string</span> </span>&#123; <span class="comment">//注意：可选参数必须配置到参数的最后面</span></span><br><span class="line">    <span class="keyword">if</span>(age)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>--<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>--年龄保密`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res1 = getInfo1(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res1)</span><br><span class="line"><span class="comment">// 默认参数   es5中不支持默认参数，es6和ts都支持默认参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInfo2</span>(<span class="params">name:string,age:number=<span class="number">20</span></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>--<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res2 = getInfo2(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res2)</span><br><span class="line">  <span class="comment">// 剩余函数  </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...res:number[]</span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum:number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> res)&#123;</span><br><span class="line">      sum += i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res3:number=add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res3)</span><br><span class="line">  <span class="comment">//  函数的重载(定义相同名字的函数，参数类型，个数不一样时，ts会通过你的传参来确定你调用哪一个函数)</span></span><br><span class="line">  <span class="comment">//在ts中支持函数的重载，     ------如果在es5中，出现同名的函数，下面的函数将会替换上面的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInfo3</span>(<span class="params">name:string</span>):<span class="title">string</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInfo3</span>(<span class="params">age:number</span>):<span class="title">number</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInfo3</span>(<span class="params">str:any</span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str === <span class="string">&quot;string&quot;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;我的名字是&quot;</span>+str</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;我的年龄是&quot;</span>+str</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="类与继承"><a href="#类与继承" class="headerlink" title="类与继承"></a>类与继承</h2><ul><li>es5中的类</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&quot;在运动&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型链和对象冒充组合继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>,name,age) <span class="comment">// 这一步很重要，把name，age传参。对象冒充继承 </span></span><br><span class="line">&#125;</span><br><span class="line">Web.prototype = <span class="keyword">new</span> Person() <span class="comment">//原型链继承</span></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>)</span><br><span class="line">w.run()</span><br></pre></td></tr></table></figure><ul><li>ts中的类</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="attr">name</span>:string</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">n:string</span>)</span>&#123; <span class="comment">//当实例化的时候就会触发构造函数</span></span><br><span class="line">    <span class="built_in">this</span>.name = n</span><br><span class="line">  &#125;</span><br><span class="line">  run():<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&quot;在运动&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">p.run</span><br></pre></td></tr></table></figure><h2 id="ts接口"><a href="#ts接口" class="headerlink" title="ts接口"></a>ts接口</h2><ul><li><p>接口的作用：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里，接口起到一种限制和规范的作用。接口定义了某一批所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供的某些方法，提供这些方法的类就可以满足实际需要，ts中的接口类似java，同时还增加了更灵活的接口类型，包括属性，函数，可索引和类等</p></li><li><p>属性接口   对json的约束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelInfo:&#123;label:string&#125;</span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;printLabel&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">printLabel(&#123;<span class="attr">label</span>:<span class="string">&quot;zhansan&quot;</span>&#125;) <span class="comment">//正确的写法</span></span><br><span class="line"><span class="comment">// printLabel(&#123;name:&quot;zhansan&quot;&#125;)   错误的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口的定义和使用</span></span><br><span class="line">interface FullName&#123;</span><br><span class="line">  <span class="attr">firstName</span>:string,</span><br><span class="line">  <span class="attr">secondName</span>:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">name:FullName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name.firstName+<span class="string">&quot;--&quot;</span>+name.secondName)</span><br><span class="line">&#125;</span><br><span class="line">printName(&#123;</span><br><span class="line">  <span class="attr">firstName</span>:<span class="string">&quot;zhang&quot;</span>,</span><br><span class="line">  <span class="attr">secondName</span>:<span class="string">&quot;san&quot;</span></span><br><span class="line">&#125;) <span class="comment">//这种写法只能填入fristName和secondName</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">  <span class="attr">firstName</span>:<span class="string">&quot;zhang&quot;</span>,</span><br><span class="line">  <span class="attr">secondName</span>:<span class="string">&quot;san&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">printName(obj) <span class="comment">//这种写法包含fristName和secondName就行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口可选属性</span></span><br><span class="line">interface FullName1&#123;</span><br><span class="line">  <span class="attr">firstName</span>:string,</span><br><span class="line">  secondName?:string <span class="comment">//可选可不选</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name:FullName1</span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;getname&quot;</span>+name.firstName)</span><br><span class="line">&#125;</span><br><span class="line">getName(&#123;<span class="attr">firstName</span>:<span class="string">&quot;li&quot;</span>&#125;) <span class="comment">//用途：用于网络请求的参数</span></span><br></pre></td></tr></table></figure><ul><li>函数类型接口    对方法传入的参数和返回值进行约束</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface Encrypt&#123;</span><br><span class="line">  (key:string,<span class="attr">value</span>:string):string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> md5:Encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">key:string,value:string</span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> key+value</span><br><span class="line">&#125;</span><br><span class="line">md5(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>可索引接口：数组，对象的约束（不常用）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface UseArr &#123;</span><br><span class="line">  [index:number]:string <span class="comment">//索引值需要是number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr:UseArr = [<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>]</span><br><span class="line">interface UseObj &#123;</span><br><span class="line">  [index:string]:string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类类型接口 和抽象类非常相似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  eat(str:string):<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name:string</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog=<span class="keyword">new</span> Dog(<span class="string">&quot;zhang&quot;</span>)</span><br><span class="line">dog.eat()</span><br></pre></td></tr></table></figure></li><li><p>接口的扩展   接口可以继承接口</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface Father &#123;</span><br><span class="line">  work(str:string):<span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line">interface Son <span class="keyword">extends</span> Father &#123;</span><br><span class="line">  play(str:string):<span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me</span> <span class="title">implements</span> <span class="title">Son</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">play</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ts泛型"><a href="#ts泛型" class="headerlink" title="ts泛型"></a>ts泛型</h2><ul><li><p>泛型：使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据，<br>  这样用户就可以使用自己的数据来使用组件</p></li><li><p>通俗理解：泛型就是解决 类 接口 方法的复用性，以及对不特定数据的支持</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//T表示泛型，可以用任何大写字母表示，推荐T，参数，返回值与其保持一致</span></span><br><span class="line">getData&lt;number&gt;(<span class="number">123</span>)</span><br><span class="line">getData&lt;string&gt;(<span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>泛型类：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  public list:T[]=[];</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">value:T</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(value)</span><br><span class="line">  &#125;</span><br><span class="line">  min():T&#123;</span><br><span class="line">    <span class="keyword">var</span> minNum = <span class="built_in">this</span>.list[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="built_in">this</span>.list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(minNum&gt;<span class="built_in">this</span>.list[i])  minNum=<span class="built_in">this</span>.list[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minNum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> MinClass&lt;number&gt;();</span><br><span class="line">m.add(<span class="number">1</span>) </span><br><span class="line">m.add(<span class="number">2</span>) </span><br><span class="line">m.add(<span class="number">3</span>) </span><br><span class="line">m.add(<span class="number">4</span>) </span><br><span class="line">m.add(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> m1 = <span class="keyword">new</span> MinClass&lt;string&gt;();</span><br><span class="line">m1.add(<span class="string">&quot;a&quot;</span>) </span><br><span class="line">m1.add(<span class="string">&quot;e&quot;</span>) </span><br><span class="line">m1.add(<span class="string">&quot;d&quot;</span>) </span><br><span class="line">m1.add(<span class="string">&quot;c&quot;</span>) </span><br><span class="line">m1.add(<span class="string">&quot;b&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>泛型接口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">interface Fuc &#123;</span><br><span class="line">  &lt;T&gt;(value:T):T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> setData:Fuc = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;;</span><br><span class="line">setData&lt;string&gt;(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">setData&lt;number&gt;(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">interface Fuc&lt;T&gt; &#123;</span><br><span class="line">  (value:T):T</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">let</span> myData:Fuc&lt;string&gt; = setData;</span><br><span class="line"> myData(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="attr">username</span>:string | <span class="literal">undefined</span>;</span><br><span class="line">  passwrod:string | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlDb</span> </span>&#123;</span><br><span class="line">  add(user:User):<span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> User()</span><br><span class="line">u.username = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">u.passwrod = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="keyword">let</span> db = <span class="keyword">new</span> MysqlDb();</span><br><span class="line">db.add(u)</span><br></pre></td></tr></table></figure><ul><li>操作数据库的泛型类     把类作为参数来约束数据传入的类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlDb</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  add(user:T):<span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="attr">username</span>:string | <span class="literal">undefined</span>;</span><br><span class="line">  passwrod:string | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> User()</span><br><span class="line">u.username = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">u.passwrod = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="keyword">let</span> db = <span class="keyword">new</span> MysqlDb&lt;User&gt;(); <span class="comment">//可以对传入的数据进行校验</span></span><br><span class="line">db.add(u)</span><br></pre></td></tr></table></figure><h2 id="实现一个泛型接口"><a href="#实现一个泛型接口" class="headerlink" title="实现一个泛型接口"></a>实现一个泛型接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">interface DBI&lt;T&gt; &#123;</span><br><span class="line">  add(info:T):boolean;</span><br><span class="line">  updata(info:T,<span class="attr">id</span>:number):boolean;</span><br><span class="line">  <span class="keyword">delete</span>(id:number):boolean;</span><br><span class="line">  get(id:number):any[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要实现一个泛型接口，这个类应该也是是一个泛型接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>&lt;<span class="title">T</span>&gt; <span class="title">implements</span> <span class="title">DBI</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  add(info: T): boolean &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  updata(info: T, <span class="attr">id</span>: number): boolean &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span>(id: number): boolean &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  get(id: number): any[] &#123;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User1</span></span>&#123;</span><br><span class="line">  <span class="attr">name</span>:string | <span class="literal">undefined</span>;</span><br><span class="line">  pw:string | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> u1 = <span class="keyword">new</span> User1();</span><br><span class="line">u1.name = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">u1.pw = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="keyword">let</span> sql = <span class="keyword">new</span> Mysql&lt;User1&gt;();  <span class="comment">//用类约束传入的参数</span></span><br><span class="line">sql.add(u1) </span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><ul><li>命名空间：避免命名冲突</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">namespace A&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace B&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>如果想在外部访问内部空间，需要再命名空间内暴露，一个模块可以包含多个命名空间</li></ul><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><ul><li><p>装饰器：是一种特殊类型的声明，它能够被附加到类声明，方法，属性或参数上，可以修改类的行为。通俗的讲，装饰器就是一个方法，可以注入到类，方法，属性参数上来扩展类，属性，方法，参数的功能。</p></li><li><p>常见的装饰器有：类装饰器，属性装饰器，方法装饰器，参数装饰器</p></li><li><p>装饰器方法：普通装饰器（无法传参），装饰器工厂（可以传参）</p></li><li><p>类装饰器（普通装饰器）：类装饰器在类声明之前被声明（紧靠着类声明）。装饰器应用于类构造函数，可以用来监视，修改或替换类定义</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">namespace C&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:any</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params)   <span class="comment">//打印出f HttpClient</span></span><br><span class="line">    params.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;我是run&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @logClass   <span class="comment">// 紧靠着</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，类装饰器（装饰器工厂）（）可以传参</span></span><br><span class="line">namespace D&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:any</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(target) <span class="comment">// HttpClient</span></span><br><span class="line">      <span class="built_in">console</span>.log(params)   <span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @logClass(<span class="string">&quot;hello&quot;</span>) <span class="comment">// 紧靠着</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  3，类装饰器：类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数。</span></span><br><span class="line"><span class="comment">  如果类装饰器返回一个值，它会使用</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">namespace E&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">target</span></span>&#123;</span><br><span class="line">      <span class="attr">url</span>:any = <span class="string">&quot;我是修改后的数据&quot;</span></span><br><span class="line">      <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.url = <span class="built_in">this</span>.url+<span class="string">&quot;---------&quot;</span> <span class="comment">//可以替换类里面的函数</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @logClass<span class="comment">// 紧靠着</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>&#123;</span><br><span class="line">    public url:string | <span class="literal">undefined</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.url = <span class="string">&quot;我是constructor里的Url&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.url)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">namespace F&#123;</span><br><span class="line">  <span class="comment">//类装饰器</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:any</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(target) <span class="comment">// HttpClient</span></span><br><span class="line">      <span class="built_in">console</span>.log(params)   <span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//属性装饰器</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">params:string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:any,attr:any</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(target);  <span class="comment">//类的原型对象</span></span><br><span class="line">      <span class="built_in">console</span>.log(attr);</span><br><span class="line">      target[attr] = params</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @logClass(<span class="string">&quot;hello&quot;</span>) <span class="comment">// 紧靠着</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>&#123;</span><br><span class="line">    @logProperty(<span class="string">&quot;leinao.ai&quot;</span>)</span><br><span class="line">    public url:any | <span class="literal">undefined</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.url);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法装饰器：他会应用到方法的属性描述符上，可以用来监视，修改或者替换方法定义</li><li>方法装饰会在运行时传入下面3个参数：  <pre><code>1.对于静态成员来说时类的构造函数，对于实例成员时类的原型对象。  2.方法的名字。  3.成员的属性描述符。  </code></pre></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">namespace G&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logMethods</span>(<span class="params">params:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:any,name:any,desc:any</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(target);   <span class="comment">//类的原型对象</span></span><br><span class="line">      <span class="built_in">console</span>.log(name); <span class="comment">//方法的名字</span></span><br><span class="line">      <span class="built_in">console</span>.log(desc);<span class="comment">//方法的描述</span></span><br><span class="line">      <span class="comment">//修改装饰器的方法</span></span><br><span class="line">      <span class="comment">//1.保存当前的方法</span></span><br><span class="line">      <span class="keyword">var</span> oMethod = desc.value</span><br><span class="line">      <span class="comment">//2.修改方法</span></span><br><span class="line">      desc.value = <span class="function"><span class="keyword">function</span>(<span class="params">...args:any[]</span>)</span>&#123;</span><br><span class="line">        args = args.map(<span class="function">(<span class="params">v</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">String</span>(v)</span><br><span class="line">        &#125;)</span><br><span class="line">        oMethod.apply(<span class="built_in">this</span>,args) <span class="comment">//扩展</span></span><br><span class="line">      &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    public url:any | <span class="literal">undefined</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    @logMethods(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">    getData(...args:any[]): <span class="keyword">void</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.url);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  方法参数装饰器：参数装饰器表达式会在运行时当作函数被调用，可以使用参数装饰器为类的原型增加一些元素数据</span></span><br><span class="line"><span class="comment">  3个参数：</span></span><br><span class="line"><span class="comment">    1.对于静态成员来说时类的构造函数，对于实例成员时类的原型对象。</span></span><br><span class="line"><span class="comment">    2.方法的名字。</span></span><br><span class="line"><span class="comment">    3.参数在函数参数列表的索引</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">namespace H&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logParams</span>(<span class="params">params:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:any,name:any,index:any</span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params">@logParams(<span class="string">&#x27;xx&#x27;</span>) id:number</span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  装饰器执行顺序：<br>  属性装饰器–&gt;<br>  方法装饰器（有多个时从后往前）–&gt;<br>  方法参数参数器（有多个时从后往前）–&gt;<br>  类装饰器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ts的安装与使用&quot;&gt;&lt;a href=&quot;#ts的安装与使用&quot; class=&quot;headerlink&quot; title=&quot;ts的安装与使用&quot;&gt;&lt;/a&gt;ts的安装与使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ts的安装及使用&lt;/li&gt;
&lt;li&gt;1.cnpm i -g typescript</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue3-watch监听props</title>
    <link href="http://example.com/2021/12/31/vue3-watch%E7%9B%91%E5%90%ACprops/"/>
    <id>http://example.com/2021/12/31/vue3-watch%E7%9B%91%E5%90%ACprops/</id>
    <published>2021-12-31T09:11:43.000Z</published>
    <updated>2022-02-08T09:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用watch监控props的值"><a href="#使用watch监控props的值" class="headerlink" title="使用watch监控props的值"></a>使用watch监控props的值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">jobId</span>:<span class="built_in">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 只有这种方法才生效</span></span><br><span class="line">    watch(</span><br><span class="line">      <span class="function">() =&gt;</span> props.jobId,</span><br><span class="line">      <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newValue);</span><br><span class="line">        <span class="built_in">console</span>.log(oldValue);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//这种方法不生效</span></span><br><span class="line">    watch(props.jobId, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(newValue);</span><br><span class="line">      <span class="built_in">console</span>.log(oldValue);</span><br><span class="line">    &#125;,);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用watch监控props的值&quot;&gt;&lt;a href=&quot;#使用watch监控props的值&quot; class=&quot;headerlink&quot; title=&quot;使用watch监控props的值&quot;&gt;&lt;/a&gt;使用watch监控props的值&lt;/h2&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>事件循环和异步IO</title>
    <link href="http://example.com/2021/12/24/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%BC%82%E6%AD%A5IO/"/>
    <id>http://example.com/2021/12/24/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%BC%82%E6%AD%A5IO/</id>
    <published>2021-12-24T08:28:25.000Z</published>
    <updated>2021-12-24T09:28:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件循环和异步IO"><a href="#事件循环和异步IO" class="headerlink" title="事件循环和异步IO"></a>事件循环和异步IO</h2><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><ul><li>事件循环我们编写的js代码和浏览器或者Node之间的一个桥梁</li><li>浏览器的事件循环是一个我们编写的js代码和浏览器api调用（setTimeout/Ajax/监听事件等）的一个桥梁</li><li>Node的事件循环是一个我们编写的js代码和系统调用（file system/ network）的一个桥梁</li></ul><h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><ul><li>进程—是计算机已经运行的程序；</li><li>线程—是操作系统能够运行调度的最小单位；每一个进程中，都会启动一个线程来执行程序中的代码</li><li>操作系统类似一个工厂</li><li>进程类似车间</li><li>线程类似工人</li></ul><h4 id="事件循环的理解"><a href="#事件循环的理解" class="headerlink" title="事件循环的理解"></a>事件循环的理解</h4><ul><li>浏览器在执行js代码时会创建一个用来执行函数的栈，当函数执行的时候会被压入到栈中，函数执行结束会被推出栈。</li><li>当运行代码时碰到回调函数（setTimeout等），setTiemout本身会立即执行，但是它的回调函数会被浏览器保存在其他地方，当delay时间到后，会被推进一个队列中。</li><li>当栈中的任务执行完毕，浏览器发现队列中有任务的时候，会被立即放入栈中执行，依次反复。</li><li>值得注意的是有两个队列，一个被用来放微任务，一个被用来放宏任务，浏览器会优先选择微任务，当微任务队列为空的时候，会选择宏任务。</li><li><img src="https://s3.bmp.ovh/imgs/2021/12/42b26366603a6da5.webp" alt="事件循环"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事件循环和异步IO&quot;&gt;&lt;a href=&quot;#事件循环和异步IO&quot; class=&quot;headerlink&quot; title=&quot;事件循环和异步IO&quot;&gt;&lt;/a&gt;事件循环和异步IO&lt;/h2&gt;&lt;h3 id=&quot;事件循环&quot;&gt;&lt;a href=&quot;#事件循环&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Node, 浏览器, js" scheme="http://example.com/tags/Node-%E6%B5%8F%E8%A7%88%E5%99%A8-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js----Buffer [ 更新中... ]</title>
    <link href="http://example.com/2021/12/24/buffer/"/>
    <id>http://example.com/2021/12/24/buffer/</id>
    <published>2021-12-24T07:06:00.000Z</published>
    <updated>2021-12-24T07:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><h3 id="数据的二进制"><a href="#数据的二进制" class="headerlink" title="数据的二进制"></a>数据的二进制</h3><ul><li>计算机所有的内容都会通过二进制来表示</li><li>js可以直接处理比较直观的数据（比如字符串）</li><li>js处理图片一直是给浏览器处理，js只负责交给浏览器一个地址</li><li>视频：16帧/s人眼就不会感到明显的卡顿</li></ul><h3 id="Buffer和二进制"><a href="#Buffer和二进制" class="headerlink" title="Buffer和二进制"></a>Buffer和二进制</h3><ul><li>可以把Buffer看作一个存储二进制的数组</li><li>数组的每一项，是一个保存8位二进制（1byte=8bit,1kb=1024byte）,bit的中文含义是位</li><li>int类型4个字节，long类型8个字节</li></ul><h3 id="Buffer和字符串"><a href="#Buffer和字符串" class="headerlink" title="Buffer和字符串"></a>Buffer和字符串</h3><ul><li>把一个字符串放入Buffer里面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello Buffer&#x27;</span>;</span><br><span class="line"><span class="comment">//创建方式1-------过期</span></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> Buffer(message); <span class="comment">//内部将message自动编码成二进制放入Buffer数组中</span></span><br><span class="line"><span class="comment">//创建方式2</span></span><br><span class="line"><span class="keyword">const</span> buffer = Buffer.from(message);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message1 = <span class="string">&#x27;你好Buffer&#x27;</span>; <span class="comment">//中文对应的是unicode，在UTf-8中会占用3个字节</span></span><br><span class="line"><span class="keyword">const</span> buffer = Buffer.from(message， <span class="string">&#x27;utf16le&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码 (怎么样编码，就采取什么样的解码)</span></span><br><span class="line"><span class="built_in">console</span>.log(buffer.toString());</span><br></pre></td></tr></table></figure><h3 id="Buffer的alloc创建方式"><a href="#Buffer的alloc创建方式" class="headerlink" title="Buffer的alloc创建方式"></a>Buffer的alloc创建方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = Buffer.alloc(<span class="number">8</span>); <span class="comment">//可以存放8位字节</span></span><br><span class="line">buffer[<span class="number">0</span>] = <span class="number">88</span>;</span><br></pre></td></tr></table></figure><h3 id="Buffer-和文件操作"><a href="#Buffer-和文件操作" class="headerlink" title="Buffer 和文件操作"></a>Buffer 和文件操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 读取文本文件</span></span><br><span class="line">fs.readFile(<span class="string">&quot;./foo.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">//打印的是Buffer数组</span></span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> sharp = <span class="built_in">require</span>(<span class="string">&#x27;sharp&#x27;</span>);</span><br><span class="line"><span class="comment">// 读取图片文件</span></span><br><span class="line">fs.readFile(<span class="string">&quot;./bar.png&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">  fs.writeFile(<span class="string">&quot;./foo.png&quot;</span>, data, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// sharp库的使用</span></span><br><span class="line">sharp(<span class="string">&#x27;./bar.png&#x27;</span>)</span><br><span class="line">  .resize(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">  .toFile(<span class="string">&#x27;./baz.png&#x27;</span>);</span><br><span class="line"></span><br><span class="line">sharp(<span class="string">&#x27;./foo.png&#x27;</span>)</span><br><span class="line">  .resize(<span class="number">300</span>, <span class="number">300</span>) <span class="comment">//改变大小</span></span><br><span class="line">  .toBuffer() <span class="comment">//转换为Buffer</span></span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    fs.writeFile(<span class="string">&#x27;./bax.png&#x27;</span>, data, <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err)); <span class="comment">//打印null</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Buffer的创建过程"><a href="#Buffer的创建过程" class="headerlink" title="Buffer的创建过程"></a>Buffer的创建过程</h3><ul><li>Buffer并不会频繁的向操作系统申请内存，他会默认先申请一个8*1024个字节（8kb）的大小</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Buffer&quot;&gt;&lt;a href=&quot;#Buffer&quot; class=&quot;headerlink&quot; title=&quot;Buffer&quot;&gt;&lt;/a&gt;Buffer&lt;/h2&gt;&lt;h3 id=&quot;数据的二进制&quot;&gt;&lt;a href=&quot;#数据的二进制&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="node" scheme="http://example.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Vue2</title>
    <link href="http://example.com/2021/12/22/Vue_study_note/"/>
    <id>http://example.com/2021/12/22/Vue_study_note/</id>
    <published>2021-12-22T11:40:25.000Z</published>
    <updated>2021-12-22T12:02:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="全局前置路由守卫"><a href="#全局前置路由守卫" class="headerlink" title="全局前置路由守卫"></a>全局前置路由守卫</h3><ul><li>守护路由的安全（权限）  <code>router.beforeEach(callback)</code></li><li><code>callback</code>在跳转路由之前会调用</li><li><code>callback</code>在初始化的时候会调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    next（）</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p> to：去哪个组件     from：来自哪个组件     next：放行</p><ul><li>可以在路由文件中配置meta（路由元信息）属性 来判断一个组件是否需要校验</li></ul><h3 id="全局后置路由守卫"><a href="#全局后置路由守卫" class="headerlink" title="全局后置路由守卫"></a>全局后置路由守卫</h3><ul><li><code>router.afterEach(callback)</code>     可以用来改变页面的title值</li><li><code>callback</code>在跳转路由之后会调用</li><li>`callback``在初始化的时候会调用</li><li><code>router.beforeEach((to,from)=&gt;&#123;&#125;)</code><br>to：去哪个组件     from：来自哪个组件     无next参数</li></ul><h3 id="独享守卫"><a href="#独享守卫" class="headerlink" title="独享守卫"></a>独享守卫</h3><ul><li><code>beforeEnter：(to,from,next)=&gt;&#123; &#125;</code><br>独享路由守卫只有前置没有后置</li></ul><h3 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h3><ul><li><code>beforeRouteEnter (to,from,next)&#123;&#125;</code>   通过路由规则进入的组件，在进入之前调用</li><li><code>beforeRouteLeave (to,from,next)&#123;&#125;</code>  通过路由规则离开的组件，在离开之前调用</li></ul><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>使用组件时<code>&lt;component&gt;  hhhhh&lt;/component&gt;</code>，然后再component中hhh中改放入的地方<code>&lt;slot&gt;我是默认语句，当hhh为无的时候我就会出现&lt;/slot&gt;</code><br>使用多个插槽时，可以再<code>&lt;component   slot=&quot;xxx&quot;&gt;</code>   然后再编辑<code>&lt;slot  name=&quot;xxx&quot;&gt;</code></p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>在template中使用<code>v-slot:xxxx</code><br>作用域插槽：数据在组件额自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但是用数据所便利出来的结构由父组件决定）</p><h2 id="ref的使用"><a href="#ref的使用" class="headerlink" title="ref的使用"></a>ref的使用</h2><ul><li>1、ref 加在普通的元素上，用<code>this.ref.name</code>获取到的是dom元素</li><li>2、ref 加在子组件上，用<code>this.ref.name</code> 获取到的是子组件实例，可以使用子组件的所有方法。</li><li>3、如何利用 v-for 和 ref 获取一组数组或者dom 节点</li></ul><h2 id="vue中mvvm的理解"><a href="#vue中mvvm的理解" class="headerlink" title="vue中mvvm的理解"></a>vue中mvvm的理解</h2><ul><li>M就是：模型（Model）：数据模型；负责数据存储。泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。</li><li>V就是：View 视图，负责页面展示，也就是用户界面。主要由 HTML 和 CSS 来构建</li><li>VM就是：视图模型（View-Model）：负责业务逻辑处理（比如Ajax请求等），对数据进行加工后交给视图展示</li><li>通过vue类创建的对象叫Vue实例化对象，这个对象就是MVVM模式中的VM层，模型通过它可以将数据绑定到页面上，视图可以通过它将数据映射到模型上</li><li>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</li></ul><h2 id="prop的使用"><a href="#prop的使用" class="headerlink" title="prop的使用"></a>prop的使用</h2><ul><li>一般在父组件中通过v-bind定义一个动态值（<code>&lt;child  type=&quot;要传入的值&quot;&gt;&lt;child&gt;</code>），子组件通过Prop接收该值  ( <code>props:[&quot;type&quot;]</code> )</li><li><code>https://blog.csdn.net/qq_37994886/article/details/98742513</code></li><li>如果子组件需要操作Prop中的值，需要将Prop中的值赋值给本地定义的属性</li></ul><h2 id="emit的使用"><a href="#emit的使用" class="headerlink" title="emit的使用"></a>emit的使用</h2><ul><li>子组件可以使用$emit调用父组件的方法并传递数据</li></ul><h2 id="vue2小坑"><a href="#vue2小坑" class="headerlink" title="vue2小坑"></a>vue2小坑</h2><p>vue2中直接利用数组下标(  a[0]=1 ）, 进行修改是改变不了view层的<br>解决方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$nextTick，</span><br><span class="line">vue.set(数组，索引，值)，</span><br><span class="line"><span class="built_in">this</span>.$set(数组，索引，值))</span><br><span class="line">array.splice()</span><br></pre></td></tr></table></figure><p>添加对象的属性使用this.obj.a = 1 也是改变不了view层<br>解决方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue.set(对象，<span class="string">&quot;key&quot;</span>，值)</span><br><span class="line"><span class="built_in">this</span>.$set(对象，<span class="string">&quot;key&quot;</span>，值))</span><br></pre></td></tr></table></figure><p>删除对象的属性delete this.obj.a也改变不来view层  </p><p>解决方法：<br><code>this.$delete(对象名，key)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;路由守卫&quot;&gt;&lt;a href=&quot;#路由守卫&quot; class=&quot;headerlink&quot; title=&quot;路由守卫&quot;&gt;&lt;/a&gt;路由守卫&lt;/h2&gt;&lt;h3 id=&quot;全局前置路由守卫&quot;&gt;&lt;a href=&quot;#全局前置路由守卫&quot; class=&quot;headerlink&quot; title=&quot;全</summary>
      
    
    
    
    
    <category term="vue,css" scheme="http://example.com/tags/vue-css/"/>
    
  </entry>
  
  <entry>
    <title>Vue3</title>
    <link href="http://example.com/2021/12/22/Vue3/"/>
    <id>http://example.com/2021/12/22/Vue3/</id>
    <published>2021-12-22T11:40:25.000Z</published>
    <updated>2021-12-22T11:49:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="（本文是尚硅谷的学习课程资料）"><a href="#（本文是尚硅谷的学习课程资料）" class="headerlink" title="（本文是尚硅谷的学习课程资料）"></a>（本文是尚硅谷的学习课程资料）</h2><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a></li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code><ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>在使用监视函数watch时，对于基本数据类型不要<code>xxx.value</code>  这样会导致直接监视一个值。</li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理:</p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line"> <span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li>setup执行的时机<ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li>setup的参数<ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。在vue3中，使用具名插槽，最好使用<code>v-slot:name</code></li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。需要在子组件里接收一下，类似props</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line"> <span class="comment">//计算属性——简写(只能读取，不能修改，readOnly)</span></span><br><span class="line">  <span class="keyword">let</span> fullName = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//计算属性——完整（考虑读写）</span></span><br><span class="line">  <span class="keyword">let</span> fullName = computed(&#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">const</span> nameArr = value.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">          person.firstName = nameArr[<span class="number">0</span>]</span><br><span class="line">          person.lastName = nameArr[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li><li>需要引入<code>improt &#123;watch&#125; from &quot;vue&quot;</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line">watch(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line">watch([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)<span class="comment">/* 把监视的数据也丢在数组里面了。[newValue,newValue][oldValue,oldValue] */</span></span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">   若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">   若watch监视的是reactive定义的响应式数据，则强制开启了深度监视</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">watch(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line">watch([<span class="function">()=&gt;</span>person.job,<span class="function">()=&gt;</span>person.name],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况（必须要配置deep）</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive所定义的对象中的某个属性的值依然是个对象，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line">watchEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.value</span><br><span class="line">    <span class="keyword">const</span> x2 = person.age</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px" /></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px" /></div><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API（组合式api，也就是往setup里面写，要引入） 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code> //没有替代者能往setup里面写</li><li><code>created</code>=======&gt;<code>setup()</code>  //没有替代者能往setup里面写</li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li><li><p>removeEventListener:需要两个参数<code>(&quot;click,function&quot;)</code></p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p></li><li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p></li><li><p><code>const name = toRef(person.job.j1,&#39;salary&#39;)</code></p></li><li><p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p></li><li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳 过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line"> &lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line"> export default &#123;</span><br><span class="line">  name:&#x27;Demo&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">   // let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">   //自定义一个myRef</span><br><span class="line">   function myRef(value,delay)&#123;</span><br><span class="line">    let timer</span><br><span class="line">    //通过customRef去实现自定义</span><br><span class="line">    return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">     return&#123;</span><br><span class="line">      get()&#123;</span><br><span class="line">       track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">       return value</span><br><span class="line">      &#125;,</span><br><span class="line">      set(newValue)&#123;</span><br><span class="line">       clearTimeout(timer)</span><br><span class="line">       timer = setTimeout(()=&gt;&#123;</span><br><span class="line">        value = newValue</span><br><span class="line">        trigger() //告诉Vue去更新界面</span><br><span class="line">       &#125;,delay)</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">   return &#123;</span><br><span class="line">    keyword</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" /><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> ......</span><br><span class="line">    <span class="keyword">let</span> car = reactive(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    provide(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line"> ......</span><br><span class="line">    <span class="keyword">const</span> car = inject(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" /></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /></div><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line"> &lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">   &lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">   &lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Child = defineAsyncComponent(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">  &lt;Suspense&gt;</span><br><span class="line">   &lt;template v-slot:default&gt;</span><br><span class="line">    &lt;Child/&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;template v-slot:fallback&gt;</span><br><span class="line">    &lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.focus()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;（本文是尚硅谷的学习课程资料）&quot;&gt;&lt;a href=&quot;#（本文是尚硅谷的学习课程资料）&quot; class=&quot;headerlink&quot; title=&quot;（本文是尚硅谷的学习课程资料）&quot;&gt;&lt;/a&gt;（本文是尚硅谷的学习课程资料）&lt;/h2&gt;&lt;img src=&quot;https://use</summary>
      
    
    
    
    
    <category term="vue3,css," scheme="http://example.com/tags/vue3-css/"/>
    
  </entry>
  
  <entry>
    <title>brower</title>
    <link href="http://example.com/2021/12/22/brower/"/>
    <id>http://example.com/2021/12/22/brower/</id>
    <published>2021-12-22T11:40:25.000Z</published>
    <updated>2021-12-22T11:41:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="浏览器的内核"><a href="#浏览器的内核" class="headerlink" title="浏览器的内核"></a>浏览器的内核</h2><ul><li>Gecko 火狐</li><li>Trident Edge</li><li>Webkit</li><li>Blink</li></ul><h2 id="js引擎"><a href="#js引擎" class="headerlink" title="js引擎"></a>js引擎</h2><ul><li>jsCore</li><li>V8</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器&quot;&gt;&lt;a href=&quot;#浏览器&quot; class=&quot;headerlink&quot; title=&quot;浏览器&quot;&gt;&lt;/a&gt;浏览器&lt;/h1&gt;&lt;h2 id=&quot;浏览器的内核&quot;&gt;&lt;a href=&quot;#浏览器的内核&quot; class=&quot;headerlink&quot; title=&quot;浏览器的内核&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>css</title>
    <link href="http://example.com/2021/12/22/css/"/>
    <id>http://example.com/2021/12/22/css/</id>
    <published>2021-12-22T11:40:25.000Z</published>
    <updated>2021-12-22T11:40:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><h2 id="magin"><a href="#magin" class="headerlink" title="magin"></a>magin</h2><ul><li>如果 margin 属性有四个值：<br><code>margin: 25px 50px 75px 100px;</code><br>上外边距是 <code>25px</code><br>右外边距是 <code>50px</code><br>下外边距是 <code>75px</code><br>左外边距是 <code>100px</code></li></ul><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><ul><li>如果 padding 属性有四个值：<br><code>padding: 25px 50px 75px 100px;</code><br>上内边距是 <code>25px</code><br>右内边距是 <code>50px</code><br>下内边距是 <code>75px</code><br>左内边距是 <code>100px</code></li></ul><h2 id="css中的-gt"><a href="#css中的-gt" class="headerlink" title="css中的 , &gt; + ~"></a>css中的 , &gt; + ~</h2><ul><li>1、群组选择器（’,’）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* h1 和 h2 有一个被用来作为类名就可以上样式*/</span></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span> &#123; </span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2、后代选择器（空格）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示 h1 下面的所有 span 元素，不管是否以 h1 为直接父元素 */</span></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-tag">span</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>3、子元素选择器（’&gt;’）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示 h1 下面的所有以 h1 为直接父元素的 span 元素，注意必须以 h1 为直接父元素 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4、相邻兄弟选择器（’+’）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">li</span>&gt;List item <span class="number">1</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">li</span>&gt;List item <span class="number">2</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">li</span>&gt;List item <span class="number">3</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line"> &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line"> &lt;<span class="selector-tag">ol</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">li</span>&gt;List item <span class="number">1</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">li</span>&gt;List item <span class="number">2</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">li</span>&gt;List item <span class="number">3</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line"> &lt;/<span class="selector-tag">ol</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>5、兄弟选择器（’~’）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* A之后的所有B元素，不一定要紧跟在A后面、相同父元素 */</span></span><br><span class="line"><span class="selector-tag">A</span> ~ <span class="selector-tag">B</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sass学习"><a href="#sass学习" class="headerlink" title="sass学习"></a>sass学习</h2><ul><li>&amp; 表示嵌套的上一级</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    &amp; &gt;<span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/* 与下面等价 */</span></span><br><span class="line"><span class="selector-tag">ul</span>&#123;<span class="attribute">margin-bottom</span>: <span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &#123;<span class="attribute">margin-bottom</span>: <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="css伪元素"><a href="#css伪元素" class="headerlink" title="css伪元素"></a>css伪元素</h2><p>CSS 伪元素用于设置元素指定部分的样式。可用于：</p><ul><li>设置元素的首字母、首行的样式<br><code>::first-line</code>：用于向文本的首行添加特殊样式<br><code>::first-letter</code>：用于向文本的首字母（中文是首个字，英文是第一个字母）添加样式  </li><li>在元素的内容之前或之后插入内容<br><code>::before</code> 伪元素可用于在元素内容之前插入一些内容。<br><code>::after</code> 伪元素可用于在元素内容之后插入一些内容。  </li><li><code>::selection</code> 伪元素匹配用户选择的元素部分  </li><li>注意：<br>伪类对象要配合content属性一起使用<br>伪类对象不会出现在DOM中，所以不能通过js来操作，仅仅是在 CSS 渲染层加入<br>伪类对象的特效通常要使用:hover伪类样式来激活</li></ul><h2 id="css中一些想不到的属性"><a href="#css中一些想不到的属性" class="headerlink" title="css中一些想不到的属性"></a>css中一些想不到的属性</h2><h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><ul><li>用与提高图层等级<br><code>z-index : 1</code>会覆盖一起的图层</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css&quot;&gt;&lt;a href=&quot;#css&quot; class=&quot;headerlink&quot; title=&quot;css&quot;&gt;&lt;/a&gt;css&lt;/h1&gt;&lt;h2 id=&quot;magin&quot;&gt;&lt;a href=&quot;#magin&quot; class=&quot;headerlink&quot; title=&quot;magin&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ES Module 导出原理</title>
    <link href="http://example.com/2021/12/22/es-module/"/>
    <id>http://example.com/2021/12/22/es-module/</id>
    <published>2021-12-22T11:40:25.000Z</published>
    <updated>2021-12-22T11:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES-Module-导出原理"><a href="#ES-Module-导出原理" class="headerlink" title="ES Module 导出原理"></a>ES Module 导出原理</h1><p>有两个文件：  </p><ul><li>foo.js:  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;kobe&quot;</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  name,</span><br><span class="line">  age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>bar.js:  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name,age&#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure><p>注意：  </p><ul><li>export{} 这个大括号并不是一个对象，而是相当于建立了一个模块环境记录</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = name</span><br><span class="line"><span class="keyword">const</span> age = age</span><br></pre></td></tr></table></figure><p>这个模块环境记录是实时绑定的，也就是当foo里面的name发生改变，模块环境记录里的name也会被重新赋值，导致bar里面引入的name的值发生改变，同时因为模块环境记录里面是const赋值，所以当bar里引入的是基本类型的数据的时候，无法改变其的值，引入的是引用类型的值的时候，无法重新分配内存地址。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES-Module-导出原理&quot;&gt;&lt;a href=&quot;#ES-Module-导出原理&quot; class=&quot;headerlink&quot; title=&quot;ES Module 导出原理&quot;&gt;&lt;/a&gt;ES Module 导出原理&lt;/h1&gt;&lt;p&gt;有两个文件：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>front end study</title>
    <link href="http://example.com/2021/12/22/front_end_study_note/"/>
    <id>http://example.com/2021/12/22/front_end_study_note/</id>
    <published>2021-12-22T11:40:25.000Z</published>
    <updated>2021-12-22T11:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="front-end"><a href="#front-end" class="headerlink" title="front end"></a>front end</h1><h2 id="Object-assignde-使用：（浅拷贝）"><a href="#Object-assignde-使用：（浅拷贝）" class="headerlink" title="Object.assignde 使用：（浅拷贝）"></a>Object.assignde 使用：（浅拷贝）</h2><ul><li><a href="https://www.jianshu.com/p/f9ec860ecd81">https://www.jianshu.com/p/f9ec860ecd81</a></li><li>Object.assign可以用来处理数组，但是会把数组视为对象。key是索引值，value是数组值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>Object.assign</code> 把数组视为属性名为 <code>0、1、2</code> 的对象，因此源数组的 <code>0</code> 号属性<code>4</code>覆盖了目标数组的 <code>0</code> 号属性1。</p><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><ul><li>浅拷贝：因为浅复制只会将对象的各个属性进行依次复制，并不会进行递归复制，而<code>JavaScript</code>存储对象都是存地址的，所以浅复制会导致 <code>obj.arr</code> 和 <code>shallowObj.arr</code> 指向同一块内存地址</li><li>深拷贝：它不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法递归复制到新对象上。</li><li>赋值符号与拷贝的区别：在对象是引用类型<code>a=b</code>时赋值会将b的内存地址赋值给a，a改变值时，b也会改变。浅拷贝会将b第一层的内存地址与值传给a，a就算改变值，b的第一层也不会改变，但是改变a的更深层的值时，b就会改变；深拷贝无论a怎么改变，都不会影响b的值。</li></ul><h2 id="import引用的会先执行，无论语句的顺序"><a href="#import引用的会先执行，无论语句的顺序" class="headerlink" title="import引用的会先执行，无论语句的顺序"></a><code>import</code>引用的会先执行，无论语句的顺序</h2><h2 id="appendChild-方法向节点添加最后一个子节点"><a href="#appendChild-方法向节点添加最后一个子节点" class="headerlink" title="appendChild() 方法向节点添加最后一个子节点"></a><code>appendChild()</code> 方法向节点添加最后一个子节点</h2><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><ul><li>“./“：代表目前所在的目录。</li><li>“ . ./“代表上一层目录。</li><li>“/“：代表根目录。电脑中即c，盘，项目中即项目所在的文件夹</li><li>“@/“ ：vue专用，指向src文件夹</li></ul><h2 id="hash值"><a href="#hash值" class="headerlink" title="hash值"></a>hash值</h2><p>所有<code>hash</code>值都不会传给服务器<br><code>hash</code>的兼容性更好一点，<code>history</code>兼容性稍差。（上线后刷新会有问题，由后端解决）</p><h2 id="this-nextTick-回调函数"><a href="#this-nextTick-回调函数" class="headerlink" title="this.$nextTick(回调函数)"></a>this.$nextTick(回调函数)</h2><ul><li>在下一次DOM更新结束后执行其指定的回调</li><li>当改变数据后，要基于更新后 的新DOM进行某些操作时，要在<code>nextTick</code>所指定的回调函数中执行</li></ul><h2 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h2><ul><li><code>JSON.stringify()</code>的作用是将 JavaScript 对象转换为 JSON 字符串，而JSON.parse()可以将JSON字符串转为一个对象。</li><li><code>JSON.parse()</code>需要注意一点，由于此方法是将JSON字符串转换成对象，所以你的字符串必须符合JSON格式，即键值都必须使用双引号包裹</li></ul><h2 id="JavaScript-split-方法"><a href="#JavaScript-split-方法" class="headerlink" title="JavaScript split() 方法"></a>JavaScript split() 方法</h2><ul><li><code>stringObject.split(a,b)</code>  a为一个字符串，表示以a来分隔，b表示希望得到的个数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.split(<span class="string">&quot;&quot;</span>,<span class="number">3</span>))   <span class="comment">//[&#x27;H&#x27;,&#x27;e&#x27;,&#x27;l&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(b.split(<span class="string">&quot;&quot;</span>,<span class="number">3</span>))   <span class="comment">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.split(<span class="string">&quot; &quot;</span>))    <span class="comment">//[&#x27;Hello&#x27;,&#x27;World&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><code>split</code>不修改原数组</li></ul><h2 id="js修改原数组的方法"><a href="#js修改原数组的方法" class="headerlink" title="js修改原数组的方法"></a>js修改原数组的方法</h2><ul><li>1.sort() 排序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myfoo =<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line">a = [<span class="number">22</span>,<span class="number">1</span>,<span class="number">444</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a.sort()) <span class="comment">// [1,22,3,444]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.sort(myfoo <span class="comment">// [1,3,22,444]</span></span><br></pre></td></tr></table></figure><ul><li>2.reverse()  颠倒数组</li><li>3.splite() 插入/删除数组</li></ul><p>如果是删除，返回值是被删除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">array.splice(start, deleteCount, value, ...)</span><br><span class="line"><span class="comment">//start </span></span><br><span class="line"><span class="comment">//开始插入和(或)删除的数组元素的下标。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//deleteCount </span></span><br><span class="line"><span class="comment">//从start开始，包括start所指的元素在内要删除的元素个数。这个参数是可选的，如果没有指定它，splice()将删除从start开始到原数组结尾的所有元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//value, ... </span></span><br><span class="line"><span class="comment">//要插人数组的零个或多个值，从start所指的下标处开始插入。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">4</span>),a);        <span class="comment">// 返回 [5,6,7,8]; a is [1,2,3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>,<span class="number">2</span>),a);      <span class="comment">// 返回 [2,3]; a is [1,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>,<span class="number">1</span>),a);      <span class="comment">// 返回 [4]; a is [1]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>),a);  <span class="comment">// 返回 []; a is [1,2,3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>4.push()<br>向数组末尾添加一项，返回值是新长度</li><li>5.pop()<br>删除最后一个元素，返回值是数组最后一个元素</li><li>6.shift()<br>在数组开头删除一项数组，返回值是数组第一个元素</li><li>7.unshift()<br>向数组开头添加一项，返回值是新长度</li></ul><h2 id="理解对象的引用赋值"><a href="#理解对象的引用赋值" class="headerlink" title="理解对象的引用赋值"></a>理解对象的引用赋值</h2><ul><li>浅拷贝和引用赋值是一个概念</li></ul><h2 id="三目运算符判断2个条件"><a href="#三目运算符判断2个条件" class="headerlink" title="三目运算符判断2个条件"></a>三目运算符判断2个条件</h2><p>-<code>&#123;&#123;list.status==0 ?"等待付款":(list.status =="1"?"已支付":"已取消")&#125;&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;front-end&quot;&gt;&lt;a href=&quot;#front-end&quot; class=&quot;headerlink&quot; title=&quot;front end&quot;&gt;&lt;/a&gt;front end&lt;/h1&gt;&lt;h2 id=&quot;Object-assignde-使用：（浅拷贝）&quot;&gt;&lt;a href=&quot;#O</summary>
      
    
    
    
    
  </entry>
  
</feed>
